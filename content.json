{"meta":{"title":"四叶草","subtitle":"四叶草的博客","description":"一个技术宅的技术分享","author":"四叶草🍀️","url":"https://fkxxyz.github.io","root":"/"},"pages":[{"title":"页面未找到","date":"2019-12-18T11:07:25.067Z","updated":"2019-11-29T12:20:07.000Z","comments":true,"path":"404.html","permalink":"https://fkxxyz.github.io/404.html","excerpt":"","text":"很抱歉，您要访问的页面不存在 可能是输入地址有误或该地址已被删除 您可以 回到主页"},{"title":"","date":"2019-12-18T10:12:53.087Z","updated":"2019-12-18T10:12:53.087Z","comments":true,"path":"archives/index.html","permalink":"https://fkxxyz.github.io/archives/index.html","excerpt":"","text":""},{"title":"关于我","date":"2019-11-22T10:53:49.000Z","updated":"2019-11-22T10:53:49.000Z","comments":true,"path":"about/index.html","permalink":"https://fkxxyz.github.io/about/index.html","excerpt":"","text":"关于此博客 此博客建立于 2019-11-22，基于 hexo 框架，主题是 material-x，页面在 coding 上托管。 项目地址 https://fkxxyz.coding.net/p/fkxxyz/git 文章源地址 https://github.com/fkxxyz/fkxxyz-blog-src 专门用来分享技术，记录成长之路，便于大家更好的了解我，还可以作为很多知识的速查备忘。 关于我 喜欢钻研技术的技术宅一枚，感兴趣的小伙伴可以联系我。 github： fkxxyz Email：fkxxyz@163.com QQ：396519827"},{"title":"","date":"2019-12-24T10:11:33.141Z","updated":"2019-12-24T10:11:32.904Z","comments":true,"path":"aria2/index.html","permalink":"https://fkxxyz.github.io/aria2/index.html","excerpt":"","text":"window.location.href='http://47.107.251.220:443/aria2';"},{"title":"分类","date":"2019-12-18T10:12:53.087Z","updated":"2019-12-18T10:12:53.087Z","comments":true,"path":"categories/index.html","permalink":"https://fkxxyz.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-12-18T11:05:47.374Z","updated":"2019-12-12T07:36:12.000Z","comments":true,"path":"pan/index.html","permalink":"https://fkxxyz.github.io/pan/index.html","excerpt":"","text":"window.location.href='http://47.107.251.220:443/pan';"},{"title":"","date":"2019-12-21T13:53:57.962Z","updated":"2019-12-21T13:53:57.712Z","comments":true,"path":"qnote/index.html","permalink":"https://fkxxyz.github.io/qnote/index.html","excerpt":"","text":"window.location.href='http://47.107.251.220:443';"},{"title":"标签","date":"2019-12-18T11:06:12.837Z","updated":"2019-11-29T12:20:07.000Z","comments":true,"path":"tags/index.html","permalink":"https://fkxxyz.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"再也不用为中文输入法而烦恼了","slug":"d/cloverpinyin","date":"2020-06-09T23:28:01.000Z","updated":"2020-06-19T19:38:50.000Z","comments":true,"path":"d/cloverpinyin/","link":"","permalink":"https://fkxxyz.github.io/d/cloverpinyin/","excerpt":"你是否经历过搜狗输入法总是闪退bug的绝望？ 你是否经历过 fcitx 自带输入法的词库简陋？ 你是否经历过在 linux 中尝试各种输入法都不理想呢？ 这里是帮你脱离苦海的地方。","text":"你是否经历过搜狗输入法总是闪退bug的绝望？ 你是否经历过 fcitx 自带输入法的词库简陋？ 你是否经历过在 linux 中尝试各种输入法都不理想呢？ 这里是帮你脱离苦海的地方。 🍀四叶草拼音输入方案 目录 🍀四叶草拼音输入方案 目录 简介 特色 开始 linux端( fcitx ) 安装 fcitx 安装 rime 安装🍀四叶草输入方案 美观 windows端（小狼毫） 下载安装小狼毫 下载输入方案 美观 候选横排 关于发布页 基本配置 候选词个数 模糊音 常见问题 各种快捷键 出现候选框时按 Shift 字母不会上屏 删除一个自造词 词序总是错乱 emoji 字体呈方块状 导入自定义词库 基本步骤 例子详解 同步词库 其它 构建 写在最后 Created by gh-md-toc 简介 在linux端，很多拼音输入法有少许 bug 或卡顿，或功能不全，所以接触了 rime ，然而自带的朙月拼音和袖珍簡化字拼音均不是很不是很理想，但是探索过程中发现很多很好的开源项目提供词库，而 rime 输入法引擎几乎拥有所有的优点（开源、干净无广告、运行流畅、跨平台、…），甚至云同步也能用坚果云之类的服务手动实现，唯一的缺点就是门槛高定制困难，默认配置的不习惯劝退了很多人。 在此方案诞生之前，我没能找到一个比较不错的简体拼音（全拼）的输入方案，多数人用惯了大陆国产的输入法，而以我的动手能力，完全能够按照这些输入法的习惯，自己定制一个方案，共享给更多的人，让更多的人不需要怎么配置也能用上非常类似于搜狗拼音输入法的方案，尽可能开箱即用，降低所有人的使用门槛。所以，为什么不自己做一个呢？ 这个项目我会持续更新，因为我一直在用输入法，我会调教到完全合我的口味习惯为止（我过去一直在用搜狗拼音输入法）。所以如果你觉得哪里不好用，或者哪里想改善，一定要及时在 issues 提出，我只要看到就会回复。 博文地址 https://www.fkxxyz.com/d/cloverpinyin 项目地址 https://github.com/fkxxyz/rime-cloverpinyin 特色 我亲自打造的基于rime的简体拼音输入方案，有以下几大特点： 完全从零开始制作文字的拼音和基础词库，导入了几个很好用的词库： 用 pypinyin 项目生成所有字词的拼音 合并结巴中文分词项目、rime八股文和袖珍簡化字拼音的字的字频 由百度搜索到某个人基于大数据做过的360万中文词库+词性+词频，该词库是用ansj分词对270G新闻语料进行分词统计词频获得 清华大学开源词库，统计来自各大主流网站如CSDN博客、新浪新闻、搜狗语料 搜狗细胞词库 网络流行新词【官方推荐】 词库本身基于简体，并且加入繁简切换，包括自定义词库也能切换繁体（朙月拼音输入简体时的需要经过opencc转换，而且自定义词库也得手动转换成繁体才能繁简切换，而袖珍簡化字拼音不支持繁体） 默认加入 emoji 表情输入支持 加入拼音输入特殊符号的支持（如输入 pingfang 即可打出 ²） rime-symbols 该模块与此项目独立，你也可以把这个模块放到别的方案上用。 修改了几乎所有特殊符号的按键，定制全部快捷键，使之符合搜狗输入法的习惯 不磨蹭了，直接介绍怎么开始使用吧。 开始 rime 是跨平台的，在以下四个平台可用： linux 可以使用 fcitx、fxitx5、ibus windows 使用小狼毫 macOS 可以用鼠鬚管 安卓 使用同文输入法 这些软件如果你想在这些平台使用，可以具体参照官方的下载安装说明 下面介绍在 linux 和 windows 端如何安装。 linux端( fcitx ) 安装 fcitx 在 archlinux 下： 1pacman -S fcitx fcitx-qt5 fcitx-configtool 然后配置 fcitx 的环境变量 在 ~/.xprofile 写入 123456export GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=\"@im=fcitx\"export LANG=\"zh_CN.UTF-8\"export LC_CTYPE=\"zh_CN.UTF-8\" 其他发行版的安装参见 小企鹅官网安装配置方法 安装和配置完成后，记得重新登录桌面使之生效。 安装 rime 在 archlinux 下，安装 rime： 1pacman -S fcitx-rime 其他发行版请用相应的包管理器安装，详见 https://rime.im/download/ 安装🍀四叶草输入方案 在 archlinux 下，可以从 AUR 直接安装即可： 1yay -S fcitx-cloverpinyin 在其它发行版下，来发布页 https://github.com/fkxxyz/rime-cloverpinyin/releases 或 https://fkxxyz.lanzous.com/b00zl958j 下载最新版本的配置文件，如 clover.schema-1.1.0.zip 然后将其解压到 ~/.config/fcitx/rime 创建 ~/.config/fcitx/rime/default.custom.yaml ，内容为 1234patch: \"menu/page_size\": 8 schema_list: - schema: clover 其中 8 表示打字的时候输入面板的每一页的候选词数目，可以设置成 1~9 任意数字。 写好该文件之后，点击右下角托盘图标右键菜单，点“重新部署”，然后再点右键，在方案列表里面应该就有“ �️四叶草拼音输入法”的选项了。 关于 default.custom.yaml 文件的更多解释，可以参考官方文档定制指南 美观 关于 fcitx 的皮肤，可以参考这里： 原来 fcitx 也可以这么美 —— 对 fcitx 使用搜狗皮肤的改进 windows端（小狼毫） 下载安装小狼毫 来 rime下载页 下载最新版本的小狼毫（注意 Windows XP 只最高只能下载 0.12.0），然后按照提示进行安装。 下载输入方案 来发布页 https://github.com/fkxxyz/rime-cloverpinyin/releases 或 https://fkxxyz.lanzous.com/b00zl958j 下载最新版本的配置文件，如 clover.schema-1.1.0.zip 然后将其解压到 %appdata%/rime 即可（如果你更改了用户配置目录，那么解压到对应目录即可）。 然后切换到中州韵输入法，右键托盘图标，点击输入法设定，勾选上四叶草输入方案，确定，再点右键托盘图标，重新部署，等待数分钟后，即可使用。 美观 小狼毫的字体、配色方案参考 官方配置指南–小狼毫 候选横排 候选词默认展示是竖排的，如果你习惯于横排展示候选词，请看 【小狼毫】外觀設定 方便起见，在此也附上网页版的配置链接 RIME西米 关于发布页 由于 rime 处理词库的原理是提前将词库转换为二进制文件，这个过程成为部署，所以我在发布页提供了两个压缩包，一个包含二进制文件，一个不包含二进制文件。 clover.schema 不包含二进制文件，复制到新机器上之后需要重新部署。 clover.schema-build 包含二进制文件目录（build目录），复制到新机器上之后重新部署的时间大量缩短。 由于国内访问 github 较慢，所以我在蓝奏云也上传了一份 https://fkxxyz.lanzous.com/b00zl958j 基本配置 所有配置都围绕着用户资料夹展开，参考 Rime 中的數據文件分佈及作用 另外，需要注意 rime 的配置文件严格遵守 yaml 语法，缩进都是两个空格，不能用 tab 代替，否则配置是无效的（很多人折腾死在这） 候选词个数 修改用户资料夹的 default.custom.yaml ，找到 menu/page_size 字段，如果没有则创建，设置该字段的值即可。例如 1234patch: \"menu/page_size\": 8 schema_list: - schema: clover 详见 一例、定製每頁候選數 模糊音 对于模糊音的配置，目前还没有方便的图形界面的配置，如果有需要的话照做吧： 在用户资料夹创建 clover.custom.yaml ，内容为 12345678910111213141516171819202122232425262728patch: speller/algebra: # 模糊音 # 基础 - abbrev/^([a-z]).+$/$1/ - abbrev/^([zcs]h).+$/$1/ # 补全 - derive/([dtngkhrzcs])o(u|ng)$/$1o/ # o = ou; o = ong - derive/ong$/on/ # on = ong - derive/^ding$/din/ # din = ding # 处理 v 和 u - derive/^([nl])ue$/$1ve/ # nve = nue; lve = lue - derive/^([jqxy])u/$1v/ # v = u; v = u # 智能纠错 - derive/ao$/oa/ # oa = ao - derive/([iu])a(o|ng?)$/a$1$2/ # aio = iao; aing = iang; aung = uang - derive/([aeiou])ng$/$1gn/ # gn = ng - derive/un$/uen/ # uen = un - derive/ui$/uei/ # uei = ui - derive/iu$/iou/ # iou = ui - derive/tie$/tei/ # tei = tie - derive/i$/ii/ # ii = i # i 不小心按两下 - derive/u$/uu/ # ui = u # u 不小心按两下 然后参考官方推荐的模糊音配置 https://gist.github.com/lotem/2320943 找到你想添加的模糊音，在第三行前面加上即可。 再次强调 yaml 的语法，上面每个 derive 前面都是四个空格，不能用 tab 代替。 如，我想把 en 与 eng 和 in 与 ing 模糊，那么修改后就变成了这样： 123456789101112131415161718192021222324252627282930patch: speller/algebra: # 模糊音 - derive/([ei])n$/$1ng/ # ing = in; eng = en - derive/([ei])ng$/$1n/ # in = ing; en = eng # 基础 - abbrev/^([a-z]).+$/$1/ - abbrev/^([zcs]h).+$/$1/ # 补全 - derive/([dtngkhrzcs])o(u|ng)$/$1o/ # o = ou; o = ong - derive/ong$/on/ # on = ong - derive/^ding$/din/ # din = ding # 处理 v 和 u - derive/^([nl])ue$/$1ve/ # nve = nue; lve = lue - derive/^([jqxy])u/$1v/ # v = u; v = u # 智能纠错 - derive/ao$/oa/ # oa = ao - derive/([iu])a(o|ng?)$/a$1$2/ # aio = iao; aing = iang; aung = uang - derive/([aeiou])ng$/$1gn/ # gn = ng - derive/un$/uen/ # uen = un - derive/ui$/uei/ # uei = ui - derive/iu$/iou/ # iou = ui - derive/tie$/tei/ # tei = tie - derive/i$/ii/ # ii = i # i 不小心按两下 - derive/u$/uu/ # ui = u # u 不小心按两下 当然如果你能看懂上面的正则表达式，那么你也可以自己自定义模糊音了。 修改完成后，记得重新部署生效。 常见问题 各种快捷键 该方案的默认快捷键为： 繁简切换 Ctrl+Shift+2 或 Ctrl+Shift+f 。 emoji开关 Ctrl+Shift+3 符号输入 Ctrl+Shift+4 ascii标点切换 Ctrl+Shift+5 、 Ctrl+, 或 Ctrl+。 全半角切换 Ctrl+Shift+6 、 Shift+Space 由于 rime 的设定，这些切换也可以通过打开方案选单来完成，方案选单默认有个快捷键 F4 ，按 F4，再按 2，即可看到这些设定，选择相应的开关设定即可。 这个快捷键可以修改，详见 一例、定製喚出方案選單的快捷鍵 如果你不想用 emoji 或者符号输入的功能，则需要修改配置文件才能永久关闭该功能： 修改 clover.custom.yaml ，添加一个补丁： 12345678910111213141516171819switches: - name: zh_simp_s2t reset: 0 states: [ 简, 繁 ] - name: emoji_suggestion reset: 1 states: [ \"�️️\\uFE0E\", \"�️️\\uFE0F\" ] - name: symbol_support reset: 1 states: [ \"无符\", \"符\" ] - name: ascii_punct reset: 0 states: [ 。，, ．， ] - name: full_shape reset: 0 states: [ 半, 全 ] - name: ascii_mode reset: 0 states: [ 中, 英 ] 将 emoji_suggestion 或 symbol_support 里面的 reset 改成 0 即可。 这里其实是定制方案选单的选项，reset 表示默认选中 states 的第几个选项，更多请看一例、定製簡化字輸出 出现候选框时按 Shift 字母不会上屏 由于 rime 的中英文切换的快捷键和 fcitx 的切换输入法的快捷键都是 shift ，fcitx 的快捷键优先于 rime，所以会导致这种情况。 解决方法：右键托盘图标，配置，打开 fcitx 的配置，点全局配置，额外的激活输入法快捷键，选择禁用。点显示高级选项，在这里的激活输入法可以设置为 shift 删除一个自造词 有时候错误的输入了一个词语，这个错误的词语每次会出现在候选框中，看着难过，那么可以删除这个词语。 按上下键高亮选中这个词语，然后按 Ctrl+Del 或 Shift+Del即可删除该词。（鼠须管的快捷键是 Fn + Shift + Delete） 词序总是错乱 有时候，发现以为自己最经常打的字候选词里一定排在第一位，但是时间长了发现好像并不是这么回事，似乎自己最近打的词比使用频率最高的词排序还要靠前，这导致大量的输入错误严重降低了打字效率，后来看到这个帖子 『技术贴』『改进版』小狼毫五笔自动造词、网盘同步 原来 rime 的排序特点就是如此，但是这会导致词序经常很乱，也无法固定首位，怎么办呢，我就这个问题向rime作者反馈，得到的回应是，这是记忆力算法，刚开始词序可能会变化较大，长期会趋于稳定，那这么看来暂时先这样用着时间长就好了。 emoji 字体呈方块状 这是因为没有安装 emoji 字体导致。 在 archlinux 下，可以直接从 aur 安装 apple emoji 的字体： 1yay -S ttf-apple-emoji 在其它 linux 发行版，可以从这个地址下载到 apple emoji 的字体 https://git.synh.me/dmitry/AUR/-/raw/master/files/ttf-apple-emoji/apple-color-emoji.ttc 下载好之后，需要复制到 /usr/share/fonts 的某个子目录下，然后更新字体缓存 123cd /usr/share/fontssudo fonts.dirsudo mkfontdir 在其它平台，需要自己想办法了。 导入自定义词库 可以借助深蓝词库转换这个项目，导入它所能支持的所有细胞词库如搜狗拼音细胞词库等。 基本步骤 首先在用户资料夹下建立 clover.dict.yaml ，内容为 12345678910111213141516171819name: cloverversion: \"1\"sort: by_weightimport_tables: - clover.base - clover.phrase - THUOCL_animal - THUOCL_caijing - THUOCL_car - THUOCL_chengyu - THUOCL_diming - THUOCL_food - THUOCL_IT - THUOCL_law - THUOCL_lishimingren - THUOCL_medical - THUOCL_poem - sogou_new_words 建立了这个文件之后，会覆盖默认的词库。 关于这个文件的格式详解： Dict.yaml 詳解 在这里，需要说明 import_tables 导入表里的每一项。 clover.base 这是单字的字库，包含所有字的拼音、字频，对应文件 clover.base.dict.yaml clover.phrase 这是词组的词库，包含所有基本词汇的拼音、词频，对应文件 clover.phrase.dict.yaml THUOCL_* 这是清华大学开源词库，对应文件 THUOCL_*.dict.yaml sogou_new_words 这是每周更新的搜狗网络流行新词，对应文件 sogou_new_words.dict.yaml 然后你可以在该文件的后面，按照上述格式（两个空格一个减号一个空格），任意添加你自己创建或导入的词库，当然你也可以删除上述你不想要的词库。 需要注意以下几点： clover.base 是不可以删除的，否则会失去所有文字的拼音导致导入任何词库都无效。 导入的词库也遵循同样的格式，但是导入的词库的 import_tables 项是无效的（也就是不能嵌套） 导入的词库的 name 字段必须和文件名一致，后缀为 .dict.yaml 例如文件名 “音乐词汇大全.dict.yaml” 的第一行为 1name: 音乐词汇大全 否则导入的该词库也会无效 例子详解 下面以导入搜狗音乐词汇大全的细胞词库为例 首先来这里下载该细胞词库 音乐词汇大全 然后用深蓝词库转换为 “音乐词汇大全.txt” ，下面是不同平台的使用方法： Windows端 下载地址 imewlconverter_Windows.zip 打开深蓝词库转换，指定好要转换的文件、源类型为 “搜狗细胞词库scel”，目标类型为 “Rime中州韵”，点击转换，提示是否保存点“是”，保存为 “音乐词汇大全.txt” archlinux 在 archlinux 下直接从 AUR 安装深蓝词库转换即可 yay -S imewlconverter-bin 然后执行 1imewlconverter -i:scel 音乐词汇大全.scel -o:rime 音乐词汇大全.txt 其它 linux 发行版 下载地址 imewlconverter_Linux_Mac.tar.gz ，解压得到 ImeWlConverterCmd 然后执行 1ImeWlConverterCmd -i:scel 音乐词汇大全.scel -o:rime 音乐词汇大全.txt macOS端自测 然后在用户资料夹下创建 “音乐词汇大全.dict.yaml”，内容为 12345678name: 音乐词汇大全version: \"1.0\"sort: by_weight...阿炳 a bing 1阿甲文 a jia wen 1阿拉伯风格曲 a la bo feng ge qu 1阿勒曼舞曲 a le man wu qu 1 把“音乐词汇大全.txt”里面的词都追加到后面。 然后在用户资料夹下建立 clover.dict.yaml ，内容为 1234567891011121314151617181920name: cloverversion: \"1\"sort: by_weightimport_tables: - clover.base - clover.phrase - THUOCL_animal - THUOCL_caijing - THUOCL_car - THUOCL_chengyu - THUOCL_diming - THUOCL_food - THUOCL_IT - THUOCL_law - THUOCL_lishimingren - THUOCL_medical - THUOCL_poem - sogou_new_words - 音乐词汇大全 右键托盘图标，点击“重新部署”，片刻之后，打字测试看看有没有相应的词汇吧。 同步词库 rime 允许不同系统之间进行词库的同步。 该功能详见 同步用戶資料 默认同步的文件夹在用户资料夹下 sync ，点击同步时，会生成这个文件夹，你也可以设置 installation.yaml 里面的 sync_dir 来修改同步文件夹。 用户词库词频信息被保存在 同步文件夹下的对应 id 里的 clover.userdb.txt 里，每次点击同步时，会合并所有 id 里的该文件。 所以可以利用云同步服务例如 坚果云 一类的软件，来实现个人不同电脑之间的词库同步。 其它 其它常见问题看官方文档的常见问题吧。 构建 一般情况下，我在发布页提供的是已经生成好的词库和部署好的二进制文件，直接使用即可。 如果你想自己从零开始构建，或者想为别的 linux 发行版打包，那么继续往下看。 该仓库的内容只包含构建四叶草输入法方案的脚本，构建需要以下环境 操作系统： linux python版本： 3 python依赖的库： jieba、pypinyin、opencc、requests 下载工具（三者任意一个均可）： aria2、wget、curl 解压工具（三者任意一个均可）： unzip、bsdtar、7z rime基础库： librime 克隆此仓库，然后直接执行构建即可 1./build 完成后，会生成 cache 目录和 data 目录 data 是最终生成的目录 cache 是生成过程中下载和生成的中间文件 其中，执行 build 时，可以有个参数 1./build [minfreq] minfreq 代表360万词里面指定的最小词频，频率低于该值的词语会被筛选掉，达到精简词库的目的，默认是100，该值越小，最终生成的词库越大，为 0 表示不精简词库（会生成大约 100 兆左右的词库）。 构建完成后，可以打包，在 data 目录生成发布用的压缩包 1.&#x2F;pack [ver] ver 表示版本号，例如 1.1.2 写在最后 此项目完全开源，你可以随意 fork 或修改和定制，如果你觉得好用，可以来AUR投票和在github上star，投票和star的人越多越容易被搜索到，以此更好地传播出去。 再次重复开头说的： 这个项目我会持续更新，因为我一直在用输入法，我会调教到完全合我的口味习惯为止（我过去一直在用搜狗拼音输入法）。所以如果你觉得哪里不好用，或者哪里想改善，一定要及时在 issues 提出，我只要看到就会回复。 当然你也可以直接联系我本人。","categories":[{"name":"原创开发","slug":"原创开发","permalink":"https://fkxxyz.github.io/categories/%E5%8E%9F%E5%88%9B%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"rime","slug":"rime","permalink":"https://fkxxyz.github.io/tags/rime/"},{"name":"fcitx","slug":"fcitx","permalink":"https://fkxxyz.github.io/tags/fcitx/"},{"name":"输入法","slug":"输入法","permalink":"https://fkxxyz.github.io/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"}]},{"title":"用 python 实现了个文本简谱解释器，可以用来编配和弦","slug":"d/simp-score","date":"2020-06-06T06:49:41.000Z","updated":"2020-06-06T06:49:41.000Z","comments":true,"path":"d/simp-score/","link":"","permalink":"https://fkxxyz.github.io/d/simp-score/","excerpt":"最近学了一点即兴伴奏，想训练自己分辨和弦，编配和弦的能力，但是手头没有钢琴去尝试，只有光遇游戏里的十五键钢琴（惨奥）。 无意之中发现了这么个项目 https://github.com/Rainbow-Dreamer/musicpy/ 顿时来了灵感，这么熟练python了，为什么不用python来写音乐呢","text":"最近学了一点即兴伴奏，想训练自己分辨和弦，编配和弦的能力，但是手头没有钢琴去尝试，只有光遇游戏里的十五键钢琴（惨奥）。 无意之中发现了这么个项目 https://github.com/Rainbow-Dreamer/musicpy/ 顿时来了灵感，这么熟练python了，为什么不用python来写音乐呢 背景 该项目作者的思想是用代码来写音乐，达到一定的抽象程度，短短几十几百个字节能够表达出一个midi文件轨道记录的几千个音符。 我所了解到的即兴伴奏的思想就是左手基本上就是几个套路（如隔三空二四二之类的），而用midi文件来表达这些的话，却要把每个音符全都无脑的记录下来。 其实呢，只需要主旋律，和这个小节对应的和弦，再加上伴奏的织体，就足以表达了。 那么我可不可以开发这样一个项目呢，能够随意改动和弦和织体，然后不断的试听和感受不同和弦不同织体产生的效果，达到很好的训练目的（而这一需求，要是用一些专业软件不断的调整音轨里面的高度来实现，将是灾难性的麻烦），我希望我改个和弦只需要改一个字母！！ 程序逻辑设计 最终决定，用文本格式表达简谱的内容，包含主旋律、和弦、织体等信息，自己定义其格式，然后编写一个简谱解释器，能够播放出来或者转换成音轨记录到 midi 文件里面。 初步的规则如下 用 1～7 表达简谱中的音符，0 代表休止符，和简谱一致 在一个音符后面，用 ` 代表高音，用 . 代表低音，可以叠加 在一个音符后面，用 _ 代表八分音符（可叠加成十六分音符等），用 - 代表延音，用 ^ 表示连音线，用 * 表示附点 在一个音符后面，用 b 代表降音，用 # 代表升音 用中括号 [] 括起来的音符表示同时发音 用括号 () 括起来的音符，可以同时进行 `._b#的运算，降低表达长度 在小括号后面加 $ 表示括号内全部连音，比如 (222)$ 表示一个四分音符内三连音 用 | 表示小节线，每一行可以放任意多小节，换行表示两个小节叠加成不同的声部，用单独的一减号 - 表示另起一个小节，而不是叠加声部。 能够按特定的格式提前定义若干个织体格式，然后将织体当成一个函数，参数是和弦，程序自动计算出织体加和弦对应的若干个音符，进而得到整个伴奏。 织体究竟该怎么定义，这是个头大的问题，因为实际应用中，可以很灵活应用，比如我可以隔三空二四，可以隔三空二四二，还可以减法法则，从后往前减去若干个音符。 最终决定用替换法，比如 C 大调和弦 C E G，我用 1 表示 C，2 表示 E，3表示 5，4表示高音C，5表示高音E，以此类推。那么我隔三空二就可以表示为 1343，隔三空二四二是 13435343，隔三永远是 13，那么我可以把13用一个字母代替，比如a，把43和53分别用 b和c表示，那隔三空二四二就表示为 abcb，隔三空二二二就可以是 abbb，哈哈哈哈哈哈哈。 精心设计之后，决定织体定义格式如下 123456texture &lt;织体名&gt;: &#123; @ &#x3D; &lt;默认的织体标识&gt; # 可选，&lt;默认的织体标识&gt; 可以是下面等号左边的任意一个值，表示默认值。 &lt;织体标识1&gt; &#x3D; &lt;织体内容1&gt; &lt;织体标识2&gt; &#x3D; &lt;织体内容2&gt; ...&#125; 织体标识就相当于上面讲到的 a b c ，织体内容就是上面讲到的 13435343。 实际解析时，会先将若干个织体标识组转换为织体内容，然后织体内容最终会被转换成具体的音符。 下面举例 1234567texture s:&#123; @ &#x3D; 1 1 &#x3D; (13434343).._ a &#x3D; (13).._ b &#x3D; (43).._ c &#x3D; (53).._&#125; 这样一定义，再定义如何调用： 1织体名(和弦[,织体标识组][,和弦转位][,减法法则]) 国际惯例，中括号是可选参数 那么， s(C,abcb) 替换里面的标识就等价于 (13)…_(43)…_(53)…_ 进而等价于 (15)…_(1`5)…_(3`5)…_(1`5)…_ 也就是说 s(C,abcb) 就表示 C 和弦的隔三空二四二，只需要改一个字母把 C 改成 F，就成了四级和弦的隔三空二四二！ 下面介绍各个参数 织体标识组省略：省略的情况下，默认是 @ 指向的织体。 和弦转位：用 +1 或 +2 等等表示，+1 表示第一转位，即 s(C,+1) 最终会被解析成(31`)…_(`3`1)…_(3`1`)…_(3`1`)…_ 减法法则：用 -1 或 -3 等等表示，表示减去多少个音符，即 s(C,-1) 最终会被解析成 (15)…_(1`5)…_(1`5)…_(1`0)…_ 三个参数位置可以随意调整和缺省，因为解析的时候，前面带有+就是和弦转位，-就是减法法则，不带就是织体标识，参数之间用逗号隔开。 此外还有一些细节，在示例中说到，详见 summer.txt。 程序诞生 经过几天的调试努力，最终诞生，取名为 simp-score，用法参数如下： 1simp-score &lt;src&gt; [dest] 表示将 src 文件里记录的简谱，解析并输出到 dest 的 midi 文件中。 还有一些可选参数，详见 --help 我将菊次郎的夏天作为示例乐谱 summer.txt，最终生成 summer.mid 注意我调用了 mingus 库的内容，需要 pip install mingus 安装这个库，才能正常运行。 后序可能的改进 如果后序改进，可能会添加自定义和弦的功能，预设了大多和弦在程序开头，或许万一有别的特殊需要呢。","categories":[{"name":"原创开发","slug":"原创开发","permalink":"https://fkxxyz.github.io/categories/%E5%8E%9F%E5%88%9B%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"python","slug":"python","permalink":"https://fkxxyz.github.io/tags/python/"},{"name":"音乐","slug":"音乐","permalink":"https://fkxxyz.github.io/tags/%E9%9F%B3%E4%B9%90/"},{"name":"和弦","slug":"和弦","permalink":"https://fkxxyz.github.io/tags/%E5%92%8C%E5%BC%A6/"},{"name":"即兴伴奏","slug":"即兴伴奏","permalink":"https://fkxxyz.github.io/tags/%E5%8D%B3%E5%85%B4%E4%BC%B4%E5%A5%8F/"}]},{"title":"fcitx 真的也可以这么美 —— 对 fcitx 使用搜狗皮肤的改进","slug":"d/ssfconv","date":"2020-05-25T04:46:51.000Z","updated":"2020-05-25T04:46:51.000Z","comments":true,"path":"d/ssfconv/","link":"","permalink":"https://fkxxyz.github.io/d/ssfconv/","excerpt":"fcitx输入法框架能够自定义皮肤，然后有个很nb的作者开发了个搜狗皮肤转换成fcitx皮肤的，这是原项目地址https://github.com/VOID001/ssf2fcitx 然后我亲自试了几个我喜欢的皮肤，居然真的可以转换，跟搜狗差不多了，不过一段时间后，发现一些bug：设置了皮肤之后，输入法菜单隔空而且透明，字都看不清。部分皮肤文字位置很奇怪。于是，我看了他的源码，发现逻辑还挺简单，然后看了下fcitx的自定义皮肤的各种格式，打算亲自研究研究这是怎么回事。 最终打算参考这个项目，自己用python写个，不仅解决了zip压缩格式，还实现了图片自动裁剪（不愧是胶水语言）","text":"fcitx输入法框架能够自定义皮肤，然后有个很nb的作者开发了个搜狗皮肤转换成fcitx皮肤的，这是原项目地址https://github.com/VOID001/ssf2fcitx 然后我亲自试了几个我喜欢的皮肤，居然真的可以转换，跟搜狗差不多了，不过一段时间后，发现一些bug：设置了皮肤之后，输入法菜单隔空而且透明，字都看不清。部分皮肤文字位置很奇怪。于是，我看了他的源码，发现逻辑还挺简单，然后看了下fcitx的自定义皮肤的各种格式，打算亲自研究研究这是怎么回事。 最终打算参考这个项目，自己用python写个，不仅解决了zip压缩格式，还实现了图片自动裁剪（不愧是胶水语言） 最终两个函数实现，取名为转换器ssfconv，放到 github 托管 https://github.com/fkxxyz/ssfconv 在原作者的基础上进行了下面几方面改进： 部分皮肤文字位置重新计算，摆放更合理 将菜单的背景也设置成皮肤的主题色，文字大小和颜色均计算到合理 字体单位改成像素，和搜狗一致，完美还原 调整了翻页指示器的位置，自动生成指示器的图像 直接上图吧（我自己都没想到linux的输入法也可以这么美） 开始使用 下面直接举例吧。 下载此仓库 12git clone https://github.com/fkxxyz/ssfconv.gitcd ssfconv 下载皮肤 先从搜狗输入法的皮肤官网下载自己喜欢的皮肤，得到ssf格式的文件，例如 【雨欣】蒲公英的思念.ssf 转换皮肤 1./ssfconv 【雨欣】蒲公英的思念.ssf 【雨欣】蒲公英的思念 复制到用户皮肤目录 12mkdir -p ~/.config/fcitx/skin/cp 【雨欣】蒲公英的思念 ~/.config/fcitx/skin/ 使用该皮肤 右键输入法托盘图表，选中皮肤，这款皮肤是不是出现在列表里了呢，尽情享用吧。 详细介绍 使用方法被封装得非常简单，像个转换器，可以在下面四种格式之间任意转换： ssf格式（加密） ssf格式（未加密，本质是zip） 文件夹（解密或解压ssf格式得到） fcitx格式（在文件夹的基础上多了fcitx_skin.conf，可用于fcitx） 命令行参数 1ssfconv &lt;src&gt; &lt;dest&gt; [-t type] 源文件和目标文件是必选参数，转换的目标类型 -t 是可选参数，type值是下面四个值之一： 1234fcitx 可直接用于fcitx的文件夹dir 解包后的文件夹encrypted 加密的ssf皮肤zip 未加密的ssf皮肤（zip） 默认是转换为 fcitx 格式。 注意，源文件的格式可以是以上任意四个格式之一，不需要指定，程序已经可以智能识别格式。 已知缺陷 因为fcitx的限制，输入框里只能对文字的外边距进行设置，无法像搜狗拼音输入法一样任意调整坐标，导致部分皮肤只能在图片拉升和文件位置靠右来二选一的取舍。不过大多数皮肤都能挺不错的转换，只有少数皮肤实在是没办法了，只好用图片拉升代替（原作者是将文字调整到靠右，留了很多空白）。","categories":[{"name":"原创开发","slug":"原创开发","permalink":"https://fkxxyz.github.io/categories/%E5%8E%9F%E5%88%9B%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"fcitx","slug":"fcitx","permalink":"https://fkxxyz.github.io/tags/fcitx/"},{"name":"输入法","slug":"输入法","permalink":"https://fkxxyz.github.io/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"},{"name":"皮肤","slug":"皮肤","permalink":"https://fkxxyz.github.io/tags/%E7%9A%AE%E8%82%A4/"}]},{"title":"探索在 Archlinux 下使用 wine 时偶尔提示未找到 wine-mono 的完美解决方案","slug":"learn/wine-mono","date":"2020-05-12T09:23:52.000Z","updated":"2020-05-12T09:23:52.000Z","comments":true,"path":"learn/wine-mono/","link":"","permalink":"https://fkxxyz.github.io/learn/wine-mono/","excerpt":"使用 archlinux 有一段日子了，发现有时候在使用 wine 的过程中，明明已经装了 wine-mono 这个包，但依然时常出现这个对话框，很恼火，是时候把这问题探究彻底了。","text":"使用 archlinux 有一段日子了，发现有时候在使用 wine 的过程中，明明已经装了 wine-mono 这个包，但依然时常出现这个对话框，很恼火，是时候把这问题探究彻底了。 问题描述 我们知道，wine 的 mono 组件是.NET Framework的开源和跨平台实现，能够让 Wine 顺利运行很多 .NET应用程序。 出现上述对话框后，点击安装，虽然会自动从 wine 官网把 mono 组件下到 $WINEPREFIX 里面，也是可以用，但是下的很慢，耗费很多时间，而且用 .NET 程序用的少，有时候仅仅想测试一个 exe 程序，点取消的话，每次要 wine 一个程序的时候都会弹出这个，实在讨厌。 后来，我觉得最新版的 wine 没有 wine-stable 稳定，我自己从 aur 编译了 wine-stable 之后，开始次次出现以上对话框了，经过百度谷歌，搜到的全是解决别的问题，无奈之下只能自己动手丰衣足食。 问题探究 先看看 wine-mono 这个包包含什么。 1pacman -Ql wine-mono 根据输出结果看出，原来只包含一个文件，还带版本号 /usr/share/wine/mono/wine-mono-4.9.3.msi emmmm，什么？带版本号？我想起这问题偶然出现，什么时候出现呢，就是升级系统的时候会偶尔出现。那么 wine 是如何找到这个文件，以确认 mono 存在性呢？难道是扫描 /usr/share/wine/mono/ 整个目录？那可以找到的啊。 根据这些线索，我猜测，wine 是根据绝对路径和带版本号的文件名寻找 mono 的，一旦所需要的 mono 版本，和系统中存在的 mono 版本不一样，就会出现那找不到的对话框。 如何验证这个猜想呢，我想到 grep -rn 这个在所有子目录里面查找匹配的功能，开始行动。 先查看 wine-stable 包含哪些文件 1pacman -Ql wine-stable 根据输出结果，大概知道 wine 的文件集中在以下几个目录 123&#x2F;usr&#x2F;lib&#x2F;wine&#x2F;usr&#x2F;lib32&#x2F;wine&#x2F;usr&#x2F;share&#x2F;wine 还有很多细小的目录，直接搜会很麻烦。我想到一个方案，把以前编译好的 wine-stable 安装包解压到一个目录里面，集中搜索。说干就干！ 1234mkdir /tmp/winecd /tmp/winetar xf ~/.cache/yay/wine-stable/wine-stable-4.0.2-1-x86_64.pkg.tar.xzls 然后开始搜索 1grep -rn wine-mono 几秒钟后，输出结果只有三行 123匹配到二进制文件 usr&#x2F;lib32&#x2F;wine&#x2F;appwiz.cpl.so匹配到二进制文件 usr&#x2F;lib&#x2F;wine&#x2F;appwiz.cpl.so.BUILDINFO:1138:installed &#x3D; wine-mono-4.9.2-1-any 最后一行保存的是软件包的信息，wine 启动的过程中肯定是不会用的。那…重点研究下 usr/lib/wine/appwiz.cpl.so 这个文件好了 1grep -a wine-mono usr/lib/wine/appwiz.cpl.so 输出结果 12.47wine_gecko-2.47-x86_64.msigeckoMSHTMLGeckoUrlGeckoCabDir4.7.5wine-mono-4.7.5.msimonoDotnetMonoUrlMonoCabDir%s does not exist and could not be created: %s 果然，包含了字符串 wine-mono-4.7.5.msi，也就是说，wine-stable 是依赖于 4.7.5 版本 wine-mono，而我系统里存在的是 wine-mono-4.9.3.msi，找不到很正常。 好的，现在做个实验，把 wine-mono-4.9.3.msi 复制为 wine-mono-4.7.5.msi，问题是不是解决了。 1234cd /usr/share/wine/monomv wine-mono-4.9.3.msi wine-mono-4.7.5.msirm -rf ~/.winewinecfg 发现，确实没再弹出那个对话框了，猜想成立！ 终于找到原因了，接下来想想怎么完美解决这个问题吧。 解决方案 我想到几个方案来解决这个问题： 安装旧版本的 wine-mono 的包。 更新 wine 到最新版本，确保所需的 mono 版本与官方仓库最新的 mono 的版本一致。 对 appwiz.cpl.so 这个文件进行二进制编辑，修改里面的版本号字符串。 把系统里的 wine-mono-4.9.3.msi 重命名 wine-mono-4.7.5.msi 创建符号链接解决这个问题。 想出了这么多办法，逐一分析这些办法的利弊： 安装旧版本的 wine-mono 包：这需要降级软件包，需要用 downgrade，然后可以把 wine-mono 这个软件包设为忽略更新的包写到 pacman.conf 里，这样做的话，每次升级 wine-stable 都需要检查版本号手动装合适的 wine-mono，有些麻烦。 更新 wine 到最新版本：我大量实践过程中，感觉 wine-stable 确实要稳定一些，最新版的虽然有新特性但是免不了很多 bug。而且，就算更新到最新，也会偶尔出现版本不匹配的问题。 对 appwiz.cpl.so 这个文件进行二进制编辑：这个操作很骚，但是万一以后版本号长度不一样了，怎么办呢，而且每次更新都得改也很麻烦。 重命名系统里的 wine-mono：这个操作会影响到系统里包含的文件，而每次升级之后，旧的 wine-mono 文件就不会被删掉，然后装上了新的，白白占用空间，每次来处理，也很麻烦。 创建符号链接：创建符号链接，可谓是 linux 解决这类问题最妙的办法，直接将 wine-mono-4.9.3.msi 链接到 wine-mono-4.7.5.msi，非常方便，但是每次更新还是要过来处理，还是很麻烦。 可见创建符号链接是目前最低成本的解决方法，那，有没有完美的解决方法呢？ 完美解决（已失效） 通过以上思考，我最需要的就是，更新后不需要手动去创建符号链接，用脚本自动实现更新后的解决版本不一致的问题。 每次更新后，更新什么？更新 wine-stable 或 wine-mono 的时候。 如何在每次更新这两个包，触发调用脚本呢？利用包管理器的 hook 功能。 看来完美的解决方案是存在的，下面来列出，需要解决的几个子问题： 脚本如何读取 appwiz.cpl.so 这个文件来获取所需的版本号呢？ 脚本如何确定当前系统存在的 wine-mono 的版本号对应的文件呢？ 升级后旧版本留下的符号链接会多余存在很多垃圾要怎么办呢？ 然后这些问题逐一得到解决： 直接利用正则表达式匹配 1sed -n 's/.*\\(wine-mono-[[:digit:].]\\+.msi\\).*/\\1/p' /usr/lib/wine/appwiz.cpl.so 输出结果为 wine-mono-4.7.5.msi 直接用包管理器查询包含的文件，然后正则匹配到具体文件名 1pacman -Qlq wine-mono | grep -o 'wine-mono-\\([[:digit:].]\\+\\).msi' 输出结果为 wine-mono-4.9.3.msi 每次更新后，先将 /usr/share/wine/mono 里的符号链接全删了，再建立即可。 将以上思路进行具体实施，写成 hook 脚本，得到完美解决。具体 hook 的写法参见 alpm-hooks文档 。 在 /etc/pacman.d/hooks 里面新建一个文件 wine-mono-version-fix.hook 里面写入 1234567891011[Trigger]Type = FileOperation = InstallOperation = UpgradeTarget = usr/lib/wine/appwiz.cpl.soTarget = usr/share/wine/mono/*[Action]Description = Fixing the version of wine-mono file.When = PostTransactionExec = /usr/bin/sh -c 'find /usr/share/wine/mono -type l -exec unlink &#123;&#125; \\; ; ln -sf \"$(pacman -Qlq wine-mono | grep \"wine-mono-\\\\([[:digit:].]\\\\+\\\\).msi\")\" \"/usr/share/wine/mono/$(sed -n \"s/.*\\\\(wine-mono-[[:digit:].]\\\\+.msi\\\\).*/\\\\1/p\" /usr/lib/wine/appwiz.cpl.so)\" 2&gt;/dev/null ; true' 至此，完美解决，以后无论如何更新 wine 或 wine-mono，或者无论如何更换 wine 的版本，总是能找到对应的 wine-mono，也再也不会弹出那个对话框了。 后来发现 wine-gecko 也出了类似的情况，那么同理。 在 /etc/pacman.d/hooks 里面新建一个文件 wine-gecko-version-fix.hook 里面写入 1234567891011[Trigger]Type = FileOperation = InstallOperation = UpgradeTarget = usr/lib/wine/appwiz.cpl.soTarget = usr/share/wine/gecko/*[Action]Description = Fixing the version of wine-gecko file.When = PostTransactionExec = /usr/bin/sh -c 'find /usr/share/wine/gecko -type l -exec unlink &#123;&#125; \\; ; ln -sf \"$(pacman -Qlq wine-gecko | grep \"wine.gecko-\\\\([-.[:digit:]]\\\\+\\\\)-x86_64.msi\")\" \"/usr/share/wine/gecko/$(sed -n \"s/.*\\\\(wine.gecko-[-.[:digit:]]\\+-x86_64.msi\\\\).*/\\\\1/p\" /usr/lib/wine/appwiz.cpl.so)\" 2&gt;/dev/null ; ln -sf \"$(pacman -Qlq wine-gecko | grep \"wine.gecko-\\\\([-.[:digit:]]\\\\+\\\\)-x86.msi\")\" \"/usr/share/wine/gecko/$(sed -n \"s/.*\\\\(wine.gecko-[-.[:digit:]]\\+-x86.msi\\\\).*/\\\\1/p\" /usr/lib32/wine/appwiz.cpl.so)\" 2&gt;/dev/null ; true' 后续完美解决 上述方法成功维持了一段时间，但最近发现又蹦出那个对话框，上述方法失效了？经过探索发现，/usr/lib/wine/appwiz.cpl.so 这个文件已经被改动，里面的相关字符串已经成了 unicode 字符串，并且文件名多了个 -x86，例如： 1wine-mono-5.0.0-x86.msi 那么，根据这种情况改进一下即可解决。 利用正则表达式匹配 1strings -eb /usr/lib/wine/appwiz.cpl.so | sed -n 's/.*\\(wine-mono-[-x[:digit:].]\\+.msi\\).*/\\1/p' 输出结果为 wine-mono-5.0.0-x86.msi 用包管理器查询包含的文件，然后正则匹配到具体文件名 1pacman -Qlq wine-mono | grep -o 'wine-mono-\\([-x[:digit:].]\\+\\).msi' 输出结果为 wine-mono-5.0.0.msi 写成 hook 脚本 wine-mono-version-fix.hook 1234567891011[Trigger]Type = FileOperation = InstallOperation = UpgradeTarget = usr/lib/wine/appwiz.cpl.soTarget = usr/share/wine/mono/*[Action]Description = Fixing the version of wine-mono file.When = PostTransactionExec = /usr/bin/sh -c 'find /usr/share/wine/mono -type l -exec unlink &#123;&#125; \\; ; ln -sf \"$(pacman -Qlq wine-mono | grep \"wine-mono-\\\\([-x[:digit:].]\\\\+\\\\).msi\")\" \"/usr/share/wine/mono/$(strings -eb /usr/lib/wine/appwiz.cpl.so | sed -n \"s/.*\\\\(wine-mono-[-x[:digit:].]\\\\+.msi\\\\).*/\\\\1/p\")\" 2&gt;/dev/null ; true' 同理，gecko 也这样解决。 1234567891011[Trigger]Type = FileOperation = InstallOperation = UpgradeTarget = usr/lib/wine/appwiz.cpl.soTarget = usr/share/wine/gecko/*[Action]Description = Fixing the version of wine-gecko file.When = PostTransactionExec = /usr/bin/sh -c 'find /usr/share/wine/gecko -type l -exec unlink &#123;&#125; \\; ; ln -sf \"$(pacman -Qlq wine-gecko | grep \"wine.gecko-\\\\([-.[:digit:]]\\\\+\\\\)-x86_64.msi\")\" \"/usr/share/wine/gecko/$(strings -eb /usr/lib/wine/appwiz.cpl.so | sed -n \"s/.*\\\\(wine.gecko-[-.[:digit:]]\\+-x86_64.msi\\\\).*/\\\\1/p\")\" 2&gt;/dev/null ; ln -sf \"$(pacman -Qlq wine-gecko | grep \"wine.gecko-\\\\([-.[:digit:]]\\\\+\\\\)-x86.msi\")\" \"/usr/share/wine/gecko/$(strings -eb /usr/lib32/wine/appwiz.cpl.so | sed -n \"s/.*\\\\(wine.gecko-[-.[:digit:]]\\+-x86.msi\\\\).*/\\\\1/p\")\" 2&gt;/dev/null ; true' 最后，我将上述两个文件用 PKDBUILD 打包上传到 AUR，方便后续使用，包名为 wine-mono-gecko-version-fix","categories":[{"name":"探究学习","slug":"探究学习","permalink":"https://fkxxyz.github.io/categories/%E6%8E%A2%E7%A9%B6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"https://fkxxyz.github.io/tags/archlinux/"},{"name":"wine","slug":"wine","permalink":"https://fkxxyz.github.io/tags/wine/"}]},{"title":"猜猜我最终选择了什么桌面环境","slug":"c/myde","date":"2019-12-18T15:15:51.000Z","updated":"2019-12-18T15:15:51.000Z","comments":true,"path":"c/myde/","link":"","permalink":"https://fkxxyz.github.io/c/myde/","excerpt":"接触archlinux也有两年多了，桌面环境到底应该选哪个，我也纠结过这个问题，而且桌面环境各有各的优点。 gnome和kde虽然完善但过于庞大，性能不好时常卡顿。deepin的桌面环境虽然漂亮但是bug多时常也假死，lxde、lxqt这些轻量桌面环境虽然小巧但是界面美观性堪忧，xfce4美观比不上庞大桌面环境，性能不如lxde都不占优，用平铺式的如i3、dwm等也不太容易适应，还有fvwm？那配置复杂度了根本没时间搞那玩意好嘛。桌面环境的选择简直难上加难啊，哈哈。","text":"接触archlinux也有两年多了，桌面环境到底应该选哪个，我也纠结过这个问题，而且桌面环境各有各的优点。 gnome和kde虽然完善但过于庞大，性能不好时常卡顿。deepin的桌面环境虽然漂亮但是bug多时常也假死，lxde、lxqt这些轻量桌面环境虽然小巧但是界面美观性堪忧，xfce4美观比不上庞大桌面环境，性能不如lxde都不占优，用平铺式的如i3、dwm等也不太容易适应，还有fvwm？那配置复杂度了根本没时间搞那玩意好嘛。桌面环境的选择简直难上加难啊，哈哈。 我的探索历程 体验各个桌面环境 由于包的数量众多，要实验各个软件，就会留下很多包，尤其是桌面环境涉及到的包更多依赖更复杂，很难找到这些包名，卸载的话会漏很多，强迫症的我不想留一些不必要的软件，一开始比较蠢，把每次装了什么都记录下来，然后之后要卸载的时候，一条一条的 pacman -Rsc 。由于有着重复的工作都能用编程代替的思想，就开始思考，为何不自己编个脚本来代替这个重复的过程呢？我能不能把我需要的软件记录到一起，然后脚本自动为我卸载不必要的包呢？ 于是，一个伟大的白名单列表机制管理软件包的脚本诞生了。详见spacman 只需要手动记录一下我所有需要的顶层包到一个文本文档，然后脚本读取文本文档，和系统里的所有包进行对比，按照一系列依赖计算，算出多余了哪些包，一下子卸载得没有残留。 这下，可以放心的实验各种桌面环境了，我列表定好，然后随便装什么包，不用关心装了多少东西，然后一条 spacman -a 命令直接把系统打回原样，这感觉就和虚拟机的快照一样。 秒切换桌面环境的梦实现了，实验效率能达到十分钟之内能体验五个桌面环境，而且迅速卸载无残留。 接下来开始先后体验了这些桌面环境。 xfce4 这是我一开始的主力桌面环境，用了很久，启动速度有时候感觉慢了一点，虽然比windows快，美观也感觉差一些，虽然比lxde好些，基本功能挺全。 lxde 追求轻量一般选择这个，lxqt也是类似，速度很快，就是功能少了点，美观也都没考虑，openbox能换换主题就不错了。 kde 然后开始再次实验这个kde在archlinux下运行速度咋样。这经历不提了，我i3的cpu和机械硬盘，简直伤不起，进个桌面活活用了一分钟才稳定下来，不知道后台在干嘛，硬盘疯狂转，我的天哪，我好怕硬盘坏掉。。。。。赶紧注销执行 spacman -a，拜拜。 gnome 这个桌面总的来说还行，但是不方便的一点就是通知栏显示QQ的问题，还有应用列表也没有很好的分类，或许可以配置但是没深究，流畅度还可以，没有像kde卡得那么夸张。不过还是不喜欢这么庞大的东西，不过我觉得对于很多人来说这个桌面环境是个不错的选择。 mate 这是我后来才听说的桌面，各种组件也挺简约，但是面板自定制程度不高，还是不喜欢，也就没用多久。 组件拆开的探索 试了好几个桌面，发现还是xfce4最合我的口味，但是速度不理想而且美观程度一般。那我能不能把桌面组件全部拆开呢，自己来选择用什么面板用什么窗口管理器用什么文件管理器呢？ 答案是可以的！linux正适合这样高度定制，尤其是 archlinux，而且我还发现了这个 打造自己的桌面环境的官方wiki 。 可以配合 startx 来读取 ~/.xinitrc 文件配置，来实现自定制桌面环境，参见 archwiki-xinit，当然这需要一定的 shell 脚本编写能力和实验探索精神。 思维打开之后，开始一个一个组件的研究，鉴于窗口管理器是一个桌面环境的基本组件，那先从窗口管理器开始试吧。 选择窗口管理器 xfwm是xfce自带，然后又试了openbox，然后了解到compiz，一开始对compiz不熟，但是用过之后，发现这窗口管理器太漂亮了，而且自定制程度简直秒杀所有窗口管理器。 选择面板 然后找面板，一共预选出三个面板： xfce4-panel 论面板，感觉 xfce4 的还是老大，电源管理的托盘、声音调整的图标，应用列表菜单，都很对胃口。 lxpanel lxpanel 虽然也有 xfce4面板的基本功能，但是美观度差了点。 mate-panel mate的面板定制程度不高，连顺序都不能自由调整，不嫌弃的话可以用。 所以面板决定用 xfce4-panel 了。 尝试 startx 首先卸载所有桌面环境，然后安装 openbox，确保 xorg-server 和 xorg-xinit 也装上了才能 startx。 12pacman -S xorg-xinitpacman -S openbox 然后编辑文件 ~/.xinitrc 写入几行 1openbox 然后执行 startx 1startx 可以发现进入了 openbox 的界面，启动也很快。由于缺个终端，可以在 tty下装个终端，然后可以从 openbox 的右键打开，然后输入 xfce4-panel ，居然真的启动了面板，这样就很不错。 总结出，拆开组件的装，是完全可行的，那么把 xfce4-panel 也写入 .xinitrc 呢？ 12xfce4-panel &amp;openbox 后面加了个 &amp; 符号是为了让它后台运行接着执行下一条命令，不至于卡住这等着面板被结束。 那怎么注销呢，只能用结束 openbox的命令代替注销了 1killall openbox 然后，killall openbox ，再次 startx ，发现面板和窗口管理器都启动成功了。 上述要是哪里卡住，可以按 ctrl + alt + 1~6 来回到 tty，然后管理进程 killall 结束掉一些进程。 会话管理器 再后来的探索，发现，会话管理器也是一个桌面环境的组件之一，它的功能大概有管理启动项，掌控用户登录注销和开关机功能等。 启动项分为两类，一类是系统启动项，一类是用户启动项 系统启动项 启动项都是放在 /etc/xdg/autostart 里面的，可以看看哪些软件把自己加入了启动项 1pacman -Qo &#x2F;etc&#x2F;xdg&#x2F;autostart 用户启动项 用户启动项放在 ~/.config/autostart 里面，通常由各个软件加入进去。 而我刚刚的 startx，只启动了 openbox 和 xfce4-panel 那么我可以不要会话管理器了，把一切启动项都交给 .xinitrc 管理怎么样？是不是好办法。 在 .xinitrc 里面写入（需要安装 exo） 123456if [ -d /etc/xdg/autostart ] ; then for f in /etc/xdg/autostart/*.desktop ; do exo-open \"$f\" &amp; done unset ffi 然后 killall openbox 再 startx ，发现启动项也全启动了，同理，用户启动项也可以这样干 123456if [ -d ~/.config/autostart ] ; then for f in ~/.config/autostart/*.desktop ; do [ -x \"$f\" ] &amp;&amp; exo-open \"$f\" &amp; done unset ffi 加了一层判断，用 [ -x “$f” ] 来判断文件是否可执行，可执行才启动它，然后我可以去 ~/.config/autostart 用标记文件是否可执行的方式来管理用户启动项了。 例如开机启动 conky，创建一个 conky.desktop 到 ~/.config/autostart 里面，然后写入 123[Desktop Entry]Exec=\"conky\"Type=Application 然后将其设为可执行 1chmod +x ~/.config/autostart/conky.desktop 然后再 killall openbox在 startx，可见 conky也启动了，类似的，所有自己想自定义让什么开机启动的，都可以这么设置 完整的编写 .xinitrc 对于自定制桌面环境组件来说，自己编写 .xinitrc 至关重要，在这里总结出它的功能，然后完整的编写 管理会话，startx会启动此脚本，此脚本运行完意味着 startx 的结束，会回到 tty。 启动面板、窗口管理器等组件 管理系统启动项、用户启动项 由于每次 killall openbox 很麻烦，而且万一 openbox 出bug崩溃岂不是所有进程都会强制退出，要是没保存什么文档岂不是悲剧，想个什么办法才能维持 startx 的运行呢？ 可以想到办法，用 sleep 代替 1sleep 3650000d 这条语句的意思是等待一万年，放到 .xinitrc 的最后，怎么样，不怕 openbox 崩溃了吧。但是引发另一个问题，如何注销？killall sleep 吗？万一我某些别的脚本正在 sleep 怎么办，岂不是一起结束了？改名吧。最终方案是把 sleep 这个二进制文件复制到 /tmp/ 里面的某个地方改成别的名字，然后启动它，这样进程名就不是 sleep了，可以指定 pid 杀死进程，把 pid 也保存到 /tmp/目录吧，最终代码如下 123456789101112# deamon processdaemon_dir=/tmp/xinitrc_deamon_$USERmkdir -p $daemon_dircp -f /usr/bin/sleep $daemon_dir/xinitrc_deamon_$USER$daemon_dir/xinitrc_deamon_$USER 3650000d &amp;main_pid=$!echo $main_pid &gt; $daemon_dir/pid#### 各个启动项（注意每个启动项后面都要加 &amp; ，防止停住）...wait $main_pid 输入法问题 装 fcitx 的中文输入法（如搜狗拼音）要配置环境变量，网上很多都是说配置到 ~/.xprofile 里面，而自己组件拆开是默认不会读取这个文件的。所以，在 .xinitrc 开头加上读取，兼容这一特点。 1[ -f ~/.xprofile ] &amp;&amp; . ~/.xprofile 用 startx 启动的时候，为了让中文输入法正常工作，需要五个环境变量，这是我的 .xprofile 123456export GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=\"@im=fcitx\"export LANG=\"zh_CN.UTF-8\"export LC_CTYPE=\"zh_CN.UTF-8\" 当然 LANG 和 LC_CTYPE 这两个环境变量可能在桌面管理器的配置里面配置好了，但是 startx 的时候是没配置的，所以这两个再在这里面写一遍，兼容所有。 各个组件的选择 下面列出我几个桌面环境组件目前的选择 窗口管理器 窗口管理器我选择 compiz，原因很简单，超级美观，堪比 vista，而且所有颜色自定义，所有动画自定义，所有快捷键功能自定义，设置多的研究不过来，找不到比它更爽是桌面管理器了。 安装方法也很简单，在 AUR 里面安装compiz-core、ccsm、emerald 即可 1yay -S ccsm compiz-core emerald 装完后，启动也很简单，直接 compiz 就可以，将它写入 .xinitrc，替换掉 openbox 定制： 运行 ccsm，就可以打开 compiz 的设置，可以进行快捷键、窗口动画等等设置。 还有更多设置扩展，觉得定制不过瘾的，都可以选择性的安装如下 123yay -S compiz-fusion-plugins-mainyay -S compiz-fusion-plugins-extrayay -S compiz-fusion-plugins-experimental 运行 emerald-theme-manager 就可以进行装饰器的主题定制，还可以装一些已经有的主题 1yay -S emerald-themes 我基于其中一个主题定制成了高仿 wista 和win7的主题，也上传到了aur包名是 emerald-theme-qaz-blue-vista 1yay -S emerald-theme-qaz-blue-vista 以上的定制，只是对窗口管理器的定制，边框等等，至于窗口内元素颜色等等，可以用 gtk主题去设置（后面有讲到）。 当然，最后必须说明的是，在 archlinux 里选择 compiz 还是有一些缺点的： 由于没进入官方仓库，每次更新安装都得从 aur 编译，编译需要时间，还有就是，当arch官方仓库的一些底层库（如 protobuf）版本大更新的时候，compiz 就会出现问题，会找不到库，需要重新从 aur 编译。 有时候开机会小概率的出现装饰器启动不了 bug，也就是窗口没有边框都关闭之类的没有，我也不知道是怎么回事，出现这个bug的时候，可以打开终端运行 nohup emerald --replace &gt;/dev/null &amp; 暂时解决。 面板 面板我选 xfce4-panel，因为以下组件很容易配合 xfce4-panel 来添加托盘图标运行 123pacman -S xfce4-pulseaudio-plugin # pulseaudio 音量管理插件（仅支持 xfce4 面板）pacman -S xfce4-power-manager # xfce4 的电源管理器pacman -S xfce4-whiskermenu-plugin # 美化的 xfce4 菜单 另外，还需要解决两个问题 xfce4-panel 配合 compiz 会有些bug，工作区切换会有问题，不过有大神修改了 xfce4-panel的源码修复这些 bug，上传到了 aur，可以直接用，替换掉 xfce4-panel 1yay -S xfce4-panel-compiz 但是有一次，xfce4-panel 来了一次大更新，而 aur 上的 xfce4-panel-compiz 迟迟没有更新，我没办法就用了一段时间的 lxpanel 无会话时 whiskermenu 菜单的注销按钮和锁定屏幕的按钮是不管用的。 我研究过这个问题，单击这俩按钮时，会分别执行 /usr/bin/xflock4 和 /usr/bin/xfce4-session-logout ，那么，这两个可执行程序，我可以自己写 shell 脚本代替。为了方便的解决这个问题，我打包上传到了 aur，符号链接的方式到 /etc/xdg/xfce4/whiskermenu/，方便配合包管理器解决这个问题。 1yay -S xfce4-whiskermenu-plugin-button 然后自己编写 /etc/xdg/xfce4/whiskermenu/xfce4-session-logout 和 /etc/xdg/xfce4/whiskermenu/xflock4 ，就可以定义这两个按钮的行为了。 会话管理器 前面说过，自己编写的 .xinitrc 脚本来定制启动项，另外，根据 archwiki 的推荐，oblogout 是不错的选择 1pacman -S oblogout 然后执行 oblogout 即可弹出几个按钮，可以实现注销关机等等。里面每个按钮都可以自定义行为，修改 /etc/oblogout.conf 以下是我的配置 1234567891011121314151617181920212223242526[settings]usehal = false[looks]opacity = 70bgcolor = blackbuttontheme = oxygenbuttons = logout, restart, shutdown, suspend, lock, cancel[shortcuts]cancel = Escapeshutdown = Srestart = Rsuspend = Ulogout = Lhibernate = Hlock = K[commands]shutdown = systemctl poweroffrestart = systemctl rebootsuspend = systemctl suspendhibernate = systemctl hibernatelogout = xlogoutlock = dm-tool switch-to-greeter#safesuspend = safesuspend 其中呢，logout = xlogout 注销是我自己配合 .xinitrc 写的，在 /usr/local/bin/xlogout 里面，就一行代码 123#!/bin/bashdaemon_dir=/tmp/xinitrc_deamon_$USERkill \"$(cat $daemon_dir/pid)\" 还有 lock = dm-tool switch-to-greeter 这一行，dm-tool 是 lightdm 的组件，如果没用 lightdm，那这条命令是无效的可以删掉。 如果要用 lightdm 或者其它桌面管理器，那么可以从 aur 装这个包，把自己编写的 .xinitrc 作为会话管理器，来让桌面管理器操控 1yay -S xinit-xsession 终端 我一直使用的是不用配置的 xfce4 终端，可以根据自己喜好选择别的终端。 1pacman -S xfce4-terminal polkit 身份认证组件 这个组件几乎每个桌面环境都带个，也就是当执行 systemctl 修改系统配置的时候或者其它地方申请权限的时候，会弹出一个对话框申请权限，让你输入密码，大概有这些。 12345# polkit 身份认证组件polkit-gnome # gnome 默认简易的身份认证#lxqt-policykit # lxqt 的身份认证#mate-polkit # mate 的身份认证#deepin-polkit-agent # deepin 的身份认证 在都试了的情况下，对于颜色简约等等，我选择的是 polkit-gnome 1yay -S polkit-gnome 这个服务也需要开机自启，将以下行写入 .xinitrc 12# polkit/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 &amp; 通知服务 通知服务也是一个比较重要的组件之一，当某些软件想发送通知时，右上角会弹出一个漂浮的窗口来提醒用户，也可以 shell 执行来主动发送通知，参见 archwiki用bash发送通知 1notify-send 'Hello world!' 'This is an example notification.' --icon=dialog-information 它需要一个后台的通知服务程序才能生效，有以下通知服务程序（摘取自我的软件列表） 1234567# 通知服务#lxqt-notificationd # lxqt 的简易通知服务xfce4-notifyd # xfce4 通知服务#mate-notification-daemon # mate 的通知服务#notification-daemon # gnome 最原始的通知服务#notify-osd # unity 的通知服务#statnot # 使用python2实现的简易通知脚本 也是颜色字体等等各有各的特点，我最终选择的是 xfce4-notifyd。 1yay -S xfce4-notifyd 当然，要让他开机自启，将以下行写入 .xinitrc 1/usr/lib/xfce4/notifyd/xfce4-notifyd &amp; 文件管理器与桌面 上面没有提到过桌面背景，用 compiz 的时候桌面背景是黑的怎么办呢。得装上一个文件管理器，把文件管理器设为自动启动才可以，有以下文件管理器。 1234567891011121314# 文件管理器与桌面#thunar #xfdesktop # xfce 桌面 #thunar-volman # 可移动设备管理 #thunar-archive-plugin # 压缩解压插件 #thunar-media-tags-plugin # 媒体文件标签插件 #tumbler # 访问文件的缩略图支持#pcmanfm # lxde 的文件管理器和桌面feh # 命令行图片查看器（可用来显示壁纸）#pcmanfm-qt # lxqt 的文件管理器#deepin-file-manager # deepin 的文件管理器#nemo # Cinnamon 的文件管理器#nautilus # gnome 的文件管理器#caja # mate 的文件管理器 这个可以根据自己的喜好选择，我曾经用过一段时间的 thunar ，后来换成了 feh 来显示壁纸，不需要文件管理器了，因为对我来说，用shell命令行管理文件比图形界面个管理器要高效的多。 用文件管理器，也需要将它加入 .xinitrc 开机启动。 下面以 pcmanfm 为例 1pcmanfm --desktop &amp; 其它文件管理器如何显示桌面，看其 --help 即可 我用的是 feh 显示壁纸 1feh --bg-scale &lt;壁纸路径&gt; 用 feh 的好处是，没有后台进程。设置了壁纸了之后，会在家目录生成一个脚本文件 cat ~/.fehbg 12#!/bin/shfeh --no-fehbg --bg-scale '/usr/share/wallpapers/deepin/Scenery_in_Plateau_by_Arto_Marttinen.jpg' 所以很方便的将 feh加入到 .xinitrc 12# wallpaper~/.fehbg &amp; 壁纸的安装也有很多包提供，也可以自己到网上找图片。 12345678# 壁纸mate-backgroundsgnome-backgroundsdeepin-community-wallpapersarchlinux-wallpaperdeepin-wallpapersxfce4-artworkdeepin-wallpapers-plasma 另外，配合 feh 我还遍了两个脚本，可以实现一键切换并设置到下一个或上一个壁纸，自定义壁纸路径，自行体会吧 cat ~/.config/wallpaper-path.conf 12&#x2F;usr&#x2F;share&#x2F;backgrounds&#x2F;usr&#x2F;share&#x2F;wallpapers cat wallpaper-next 12345678910#!/bin/bashpath_conf=~/.config/wallpaper-path.confp_now=\"$(tail -1 ~/.fehbg | cut -d\"'\" -f2)\"p_all=\"$(find $(cat \"$path_conf\") -path \\*.jpg -type f)\"p_next=\"$(echo \"$p_all\" | sed -n '/'$&#123;p_now//\\//\\\\/&#125;'/&#123;n;p&#125;')\"[ \"$&#123;#p_next&#125;\" == \"0\" ] &amp;&amp; p_next=\"$(echo \"$p_all\" | head -1)\"feh --bg-scale \"$p_next\" cat wallpaper-prev 12345678910#!/bin/bashpath_conf=~/.config/wallpaper-path.confp_now=\"$(tail -1 ~/.fehbg | cut -d\"'\" -f2)\"p_all=\"$(find $(cat \"$path_conf\") -path \\*.jpg -type f)\"p_next=\"$(echo \"$p_all\" | sed -n '/'$&#123;p_now//\\//\\\\/&#125;'/&#123;x;p&#125;;h')\"[ \"$&#123;#p_next&#125;\" == \"0\" ] &amp;&amp; p_next=\"$(echo \"$p_all\" | tail -1)\"feh --bg-scale \"$p_next\" 将这两个脚本设为 compiz 的快捷键，直接按键就能切换壁纸。 设置 我发现还缺少个设置程序，我目前用的 xfce4-setting ，而且正好 deepin-wine 的QQ是依赖这个组件的。 1pacman -S xfce4-setting 也可以选择 lxde 的一些设置程序 123#lxinput # lxde 鼠标键盘偏好设置#lxrandr # lxde 显示器设置#lxappearance # lxde 自定义外观和体验 包括 gtk 主题也是在这里设置，可以设置样式、图标等等，这些有区别于 compiz 的窗口外观设置。 这些主题在这些软件包里面包含，可以都装上，然后自己慢慢选择。 123456789101112131415# 主题和图标gnome-icon-themelxde-icon-thememate-themesmate-icon-themegtk-engine-murrinepapirus-icon-themearc-gtk-themearc-icon-themedeepin-icon-themedeepin-gtk-themeadapta-gtk-themenumix-icon-theme-gitnumix-circle-icon-theme-gitvertex-themes 为了方便的预览主题，可以从 aur 安装 awf-git 这个包，切换主题可以实时预览各种控件元素的样式。 网络连接管理器 管理网络一般我用的是命令行版的 networkmanager 的 nmcli 命令。图形界面的话，network-manager-applet 就是 nmcli 的前端，它也是 gnome 默认的网络连接管理器，暂时找不到替代 1pacman -S network-manager-applet 设置网络连接和连接 wifi 都很方便，tty 里面也可以用 nmcli 管理网络 其它软件 其它还有很多很多组件，如计算器、截图工具、图片查看器、归档管理器、浏览器、音乐播放器、文本编辑器、pdf阅读器、录音工具、录屏工具、计时器等等，大多数桌面环境都是自带这些，都可以去尝试，如果喜欢别的哪个桌面环境的某个组件，都可以直接装到自己这里，出了 kde 的组件之外，别的桌面环境的组件依赖都很少，喜欢的话可以直接拿过来用。 可以继续参见我的试过的所有软件列表，看看我装过的所有软件，同时也希望大家推荐给我一些更好用的软件。 我的完整 .xinitrc 配置 贴上我完整的 .xinitrc 配置，当你看到这篇博客的时候可能很旧了，最新的配置在我的github的xorg-xinit设置 123456789101112131415161718192021222324252627282930313233343536373839404142434445[ -f ~/.xprofile ] &amp;&amp; . ~/.xprofile# deamon processdaemon_dir=/tmp/xinitrc_deamon_$USERmkdir -p $daemon_dircp -f /usr/bin/sleep $daemon_dir/xinitrc_deamon_$USER$daemon_dir/xinitrc_deamon_$USER 3650000d &amp;main_pid=$!echo $main_pid &gt; $daemon_dir/pidexport &gt; $daemon_dir/xrunecho 'exec \"$@\"' &gt;&gt; $daemon_dir/xrunchmod +x $daemon_dir/xrun# wallpaper~/.fehbg &amp;# window managercompiz &amp;# nodify/usr/lib/xfce4/notifyd/xfce4-notifyd &amp;# polkit/usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 &amp;if [ -d /etc/xdg/autostart ] ; then for f in /etc/xdg/autostart/*.desktop ; do exo-open \"$f\" &amp; done unset ffi# panelxfce4-panel &amp;if [ -d ~/.config/autostart ] ; then for f in ~/.config/autostart/*.desktop ; do [ -x \"$f\" ] &amp;&amp; exo-open \"$f\" &amp; done unset ffiwait $main_pid","categories":[{"name":"教程","slug":"教程","permalink":"https://fkxxyz.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"https://fkxxyz.github.io/tags/archlinux/"},{"name":"桌面环境","slug":"桌面环境","permalink":"https://fkxxyz.github.io/tags/%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83/"}]},{"title":"在 linux 发行版中，python 多版本共存并自由切换","slug":"c/python-env","date":"2019-12-13T10:41:24.000Z","updated":"2019-12-13T10:41:24.000Z","comments":true,"path":"c/python-env/","link":"","permalink":"https://fkxxyz.github.io/c/python-env/","excerpt":"最近有多个 python 版本共存的需求，在 archlinux 下只能 python3.8，而阿里云的 python 是 3.6，而且环境和库各不相同。包管理器也影响其存在。然后搜到了 pyenv 这个神器，这个项目直接解决了我所有遇到的 python 不同版本共存和切换的问题，不解释了，直接看官方介绍。","text":"最近有多个 python 版本共存的需求，在 archlinux 下只能 python3.8，而阿里云的 python 是 3.6，而且环境和库各不相同。包管理器也影响其存在。然后搜到了 pyenv 这个神器，这个项目直接解决了我所有遇到的 python 不同版本共存和切换的问题，不解释了，直接看官方介绍。 pyenv 的原理 选择Python版本 这里直接引用官方的原文 执行填充程序时，pyenv通过从以下来源按以下顺序读取来确定要使用的Python版本： 在PYENV_VERSION环境变量（如果指定）。您可以使用该pyenv shell命令在当前的Shell会话中设置此环境变量。 .python-version当前目录中的特定于应用程序的文件（如果存在）。您可以.python-version使用以下pyenv local 命令修改当前目录的 文件。 .python-version通过搜索每个父目录找到第一个文件（如果有），直到到达文件系统的根目录为止。 全局$(pyenv root)/version文件。您可以使用pyenv global命令修改此文件。如果不存在全局版本文件，则pyenv假定您要使用“系统” Python。（换句话说，如果您没有pyenv，则可以运行任何版本 PATH。） pyenv 的使用速查 我把这一章放到最开头，作为速查命令 安装 python 列出所有可以安装的版本 123pyenv install --list# 或pyenv install -l 只列出 python 的版本 1pyenv install -l | grep '^ *[0-9]' 安装一个版本（例如 3.6.9） 123pyenv install 3.6.9# 如果卡在下载源码上，可以手动下载源码，放到 ~/.pyenv/cache 里。# 如果源码已经被放在了 ~/.pyenv/cache/Python-3.6.9.tar.xz 那么就不会下载了，直接解压编译。 查询版本 查看当前选择的 python 版本 该命令会提示当前环境如果执行 python 的话，会启动的 python 版本，以及如何选择的 python 版本 1pyenv version 查看所有可选择的 python 版本 1pyenv versions 切换选择 python 版本 以全局方式选择 python 版本 这种方式全局生效，在任意的 shell 调用 python 时，都会以设置的 python 版本启动。 查看全局 python 版本 1pyenv global 设置全局 python 版本 1pyenv global 3.6.9 以目录模式选择 python 版本 此方式可以把某个目录设为特定版本的 python，设置时会在这个目录里写入 .python_version 文件 查看当前目录的 python 版本 1pyenv local 设置当前目录的 python 版本 1pyenv local 3.6.9 以 shell 环境模式选择 python 版本 此方式可以把当前 shell 环境设置为特定版本的 python，设置时会改变 PYENV_VERSION 这个环境变量 查看当前 shell 的 python 版本 1pyenv shell 设置当前 shell 的 python 版本 1pyenv shell 3.6.9 pyenv 的安装 安装 pyenv 在 archlinux 发行版中，由于官方仓库自带 pyenv ，直接安装即可 1sudo pacman -S pyenv 在其它不带 pyenv 的 linux 的发行版中，pyenv的github文档给出了详细的安装过程，可以按照官方给出的安装器这样安装（如果没有 git 需要先装 git） 1curl https:&#x2F;&#x2F;pyenv.run | bash 此命令克隆仓库到 ~/.pyenv 下，可执行文件在 ~/.pyenv/bin 可以看到里面只有一个 pyenv 符号链接指向 …/libexec/pyenv pyenv 的环境配置 官方给出了详细的配置过程，那么就搬运官方给的原命令 如果用的 bash ，则修改 ~/.bash_profile 12echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.bash_profileecho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.bash_profile 如果用的 zsh， 则修改 ~/.zshenv 12echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.zshenvecho 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.zshenv 然后重启 shell ，使配置生效 1exec $SHELL 现在，可以执行 pyenv 了，试试吧 1pyenv 若输出一大堆 pyenv 的帮助，则代表配置生效啦。 python 环境配置 先执行 1pyenv init 可以看到提示，将这个提示加入到他所说的文件中吧 12345# bash 下执行pyenv init 2&gt;&gt; ~/.bashrc# zsh 下执行pyenv init 2&gt;&gt; ~/.zshrc 然后执行 exec $SHELL 生效 1exec $SHELL 查看是否成功 1echo $PATH 如果看到开头为 /home/用户名/.pyenv/shims 则配置算生效啦。 安装不同版本的 python 准备编译环境 这一步可谓是至关重要，由于忽略这个问题而直接编译 python，在 centos 上，默认很多所需的包没装，那么编译的时候就会没有把相应的功能编译进去，造成后续使用的时候出现一些问题。 按照python官方的开发者文档安装依赖这一章，可以快速补上需要的依赖。 在 yum 包管理器管理的系统中： 12sudo yum install yum-utilssudo yum-builddep python3 在 dnf 包管理器管理的系统中： 12sudo dnf install dnf-plugins-core # install this to use 'dnf builddep'sudo dnf builddep python3 在 debian 系的发行版中，看官方说明吧，等我要用到的时候再总结到这里。 在Debian，Ubuntu和其他apt基于系统的系统上，尝试通过使用apt命令获取正在使用的Python的依赖关系。 首先，请确保已在“来源”列表中启用了源软件包。您可以通过将源码包的位置（包括URL，发行名称和组件名称）添加到中来实现/etc/apt/sources.list。以Ubuntu Bionic为例： 1deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu&#x2F; bionic main 对于其他发行版，例如Debian，请更改URL和名称以与特定发行版相对应。 然后，您应该更新软件包索引： 1$ sudo apt-get update 现在，您可以通过apt以下方式安装构建依赖项： 1$ sudo apt-get build-dep python3.6 下载 python 源码 虽然 pyenv 可以自动从 python 的官网下载源码，但是尝试过之后，发现一直卡住速度较慢。 可以从国内任意含有 gentoo 仓库的镜像站来下载一部分 python 源码。 3.8.0 版本 https://mirrors.tuna.tsinghua.edu.cn/gentoo/distfiles/Python-3.8.0.tar.xz 3.7.5 版本 https://mirrors.tuna.tsinghua.edu.cn/gentoo/distfiles/Python-3.7.5.tar.xz 3.6.9 版本 https://mirrors.tuna.tsinghua.edu.cn/gentoo/distfiles/Python-3.6.9.tar.xz 3.5.9 版本 https://mirrors.tuna.tsinghua.edu.cn/gentoo/distfiles/Python-3.5.9.tar.xz 2.7.17 版本 https://mirrors.tuna.tsinghua.edu.cn/gentoo/distfiles/Python-2.7.17.tar.xz 不一定有所有的版本，但包含很多常用的版本了，大概是够用了。 将他们下载到 ~/.pyenv/cache 下，先创建这个目录吧 1234cdcd .pyenvmkdir cachecd cache 然后开始下载，例如 1wget https://mirrors.tuna.tsinghua.edu.cn/gentoo/distfiles/Python-3.6.9.tar.xz 用 pyenv 安装 python 如果源码已经被放在 ~/.pyenv/cache 里了，那么在执行安装就很快了。 列出所有可安装的版本 1pyenv install --list 安装指定版本 12pyenv install 3.6.9# 如果上一步，源码已经被放在了 ~/.pyenv/cache/Python-3.6.9.tar.xz 那么这一步就不会下载了，直接解压编译。 等到输出如下信息时，代表安装成功了。 Installed Python-3.6.9 to /home/用户名/.pyenv/versions/3.6.9 然后可以愉快的安装不同版本 python 和随意切换啦。","categories":[{"name":"教程","slug":"教程","permalink":"https://fkxxyz.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://fkxxyz.github.io/tags/linux/"},{"name":"python","slug":"python","permalink":"https://fkxxyz.github.io/tags/python/"}]},{"title":"我的阿里云服务器中毒了，把这有趣的事情记录下来。","slug":"s/linux-virus","date":"2019-12-09T10:24:19.000Z","updated":"2019-12-09T10:24:19.000Z","comments":true,"path":"s/linux-virus/","link":"","permalink":"https://fkxxyz.github.io/s/linux-virus/","excerpt":"自从用了 linux，由于 linux 用户量小又开源代码审查人多的特点，从而从来没为 linux 的安全担心过，这次算是第一次遭遇到病毒，值得记录下来。","text":"自从用了 linux，由于 linux 用户量小又开源代码审查人多的特点，从而从来没为 linux 的安全担心过，这次算是第一次遭遇到病毒，值得记录下来。 病毒的发现 发现 偶然情况进了一下阿里云控制台，看了一眼监控，眼前的景象惊呆了。 连续，一个月，CPU占用100%？我阿里云平时基本空闲，也只有我访问，也没什么复杂的计算，都是挂挂反向代理和做普通网站用，怎么也不可能出现这种现象。所以到这里基本确定，是有什么问题了，但是还没联想到病毒。 怀疑 直接登录阿里云，用 top 命令看了下，确实有个进程占 100% 的CPU，进程名是 .dhpcd 我还给看错了，第一反应看成 dhcpd ，以为是 dhcp 客户端出了什么故障，但前面为什么有个 点？而且 dhcp 客户端也没必要一直开着啊，就获取地址的时候用一下，难道是出了bug，陷入死循环？ 又仔细看了下 top，用户名为 user ？？？？？更奇怪了，这个用户是我以前临时建立的，用来给一朋友登录玩 gcc 的，平时从来没用过。 定位 用 ps 看下这用户的所有进程信息 1ps -ef | grep user 在家目录的隐藏文件。直接去看看这个文件。 1ls -al 这文件还挺大，大到 3 兆，看看它的类型。 1file .dhpcd 这是编译好的二进制文件，排除了是我那朋友捣鬼。 把这文件上传到 virscan 扫描一下吧。几分钟后看到扫描结果。 可以看到，出现 BitCoinMiner 的字样，让我几乎确定是比特币挖矿病毒。而且现象也符合，狂烧 CPU，就是在挖矿嘛。 处理 先 kill 掉它，然后设置它的权限为 000。把 user 这个用户也给删了。 1chmod 000 .dhpcd 删除它吗？不删了，放那吧，等哪天想研究了再研究研究，把这小可爱留着做纪念。 但是是时候考虑安全问题了，为什么会中毒。再仔细想想，病毒只是感染了这一个用户，我这个用户的密码设置的 123456，所以很随意的就进来了，虽然没有 root 权限，没加入到 sudo 组，但是这种挖矿会占很大的资源，它可能已经挖了几个月了，而我今天才察觉到。 以后设置密码，无论是再简单的用户，再也不设这么简单的密码了，我密码最后头随便加个符号，都要好很多。","categories":[{"name":"记录","slug":"记录","permalink":"https://fkxxyz.github.io/categories/%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"信息安全","slug":"信息安全","permalink":"https://fkxxyz.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"}]},{"title":"关于手机和电脑之间文字快速互通","slug":"learn/qnote","date":"2019-12-06T13:53:30.000Z","updated":"2019-12-06T13:53:30.000Z","comments":true,"path":"learn/qnote/","link":"","permalink":"https://fkxxyz.github.io/learn/qnote/","excerpt":"有时候在手机上搜到什么好代码好网址，想立刻转到电脑上用，发现有时候不怎么方便。有这几个方案： 用通信软件，手机电脑同时启动QQ或微信，发送到电脑上。 用百度网盘或者github等服务互通。 用局域网软件，如feem、ftp等等。 用数据线，adb工具，访问手机储存。 发现都有一定的不方便之处，要启动这么庞大的QQ，要同一局域网，要数据线。 既然咱们是做技术的，技术改变生活，让生活变得更方便。现在，是时候解决这个问题了。","text":"有时候在手机上搜到什么好代码好网址，想立刻转到电脑上用，发现有时候不怎么方便。有这几个方案： 用通信软件，手机电脑同时启动QQ或微信，发送到电脑上。 用百度网盘或者github等服务互通。 用局域网软件，如feem、ftp等等。 用数据线，adb工具，访问手机储存。 发现都有一定的不方便之处，要启动这么庞大的QQ，要同一局域网，要数据线。 既然咱们是做技术的，技术改变生活，让生活变得更方便。现在，是时候解决这个问题了。 思路 由于我有个租的阿里云服务器，如果有这样一个轻量集软件，甚至不需要软件，只用浏览器，用一个网页就能实现电脑和手机互通，岂不是会非常迅速，对工作效率也会提升很多。 先找找有没有这方面的软件，闭源的商业软件要么有广告要么要登录很慢很复杂，不喜欢这样的。开源的软件也暂时找不到很方便的，希望有推荐。 应对自己这样的需求，我打算自己实现一个。 怎样的方案实现呢？想出几个备选方案： 用 python 网络编程，tcp协议，服务端放服务器，客户端在任意终端。 麻烦之处在于在tcp协议之上得自己设计自己的协议，而且手机用python并不方便，显然实现起来比较麻烦成本比较高，不做这种重复造轮子的事情。 看来浏览器是个好东西，哪个终端设备都有浏览器，那么，用前端技术实现是不是最好的选择呢。 看起来是，用php编个后端在服务器上运行，打开浏览器就能记住笔记，然后后端把笔记记录到服务器中的某个文件里，任何浏览器访问的时候，后端读取这个文件前端处理显示出来。 看来php这个方案是最方便的，就选它了。虽然前端开发经验比较少，仅限于知道http的get和post的请求，前端的html5的语法，css的基础知识，还有js基本怎么作用，后端大概怎么处理请求返回html页面的逻辑。 设计 既然是网页实现，那么在脑海里浮现了这样一个画面： 一个多行文本框，有滚动条，可以输入任意长的文本。 两个按钮，一个按钮是提交，一个按钮是清空文本。 单击提交按钮后，会把文本框的内容通过post请求发送到服务器。 每次打开页面事，文本框内会自动显示服务器记录的文本。 预备的php知识 由于没有php开发经验，只是知道php是个什么东西，只会php的hello world。没关系，先想想我需要什么，百度搜就是了。 需要用php读写文件 百度一搜，搜到了 file_get_contents、fopen、fwrite、fclose 几个函数的语法，这不和众多编程语言一模一样的语法和参数嘛，这问题解决了。 变量的用法 编程免不了使用变量，哪怕再简单的程序。查了下，发现 php 的数据类型有字符串、整数、浮点数、逻辑、数组、对象，还是挺少的。这里主要用字符串。语法也很简单，不需要声明变量，每个变量前面都要加 $ ，无论是初始化赋值还是使用。 处理post请求 这个是重点，思路是前端的文本框用post发送到后端，后端得能收到内容并且存到文件。查了下，发现这个特殊变量 $_POST ，有点类似于python的字典用法，只需要指定前端传过来的键值，那么我就用 $_POST[“content”]。 编码解码 信息传递的过程中，由于我域名没有备案，用不了https，是http方式明文传输，中途被过滤关键字什么可能会降低传输速度，我想加密或者加一层编码，哪怕只用base64状况会好很多，那就选base64吧。 查到了这些函数： base64_encode 和 base64_decode urlencode 和 urldecode rawurlencode 和 rawurldecode 语法 关于语法，在实验的过程中踩了很多坑，服务器总是返回 500 的错误码，检查发现都是漏分号。那么和 C++ 以及 java 的编程习惯一样，每个语句最后加分号。 差不多就需要这么点东西了，前端如何处理编码解码呢，html实现不了，恐怕需要js，那么还得搜集一点js的函数和知识。 预备的前端知识 在前端的js和html，有需要实现编码解码，需要解码之后改变文本框的内容，post之前也得编码。 多行文本框，随着窗口变化改变尺寸 用 textarea 标签，设置它及其 form 的样式 width 12345678form &#123; width:90%;&#125;textarea &#123; width:90%; overflow:auto; word-break:break-all;&#125; post 请求 设置 form 的 method 属性为 post post 之后页面自动跳转回去 搜索查到这样的办法，在 head 标签里面加个 meta，表示一秒钟之后刷新到 / 1&lt;meta http-equiv=\"refresh\" content=\"1;url=/\" /&gt; 编码解码 查到了这些函数： encodeURI 和 decodeURI encodeURIComponent 和 decodeURIComponent window.btoa 和 window.atob 在查询百度和反复用浏览器的控制台实验，终于弄清了他们的区别。 改变文本框内容 改变 textarea 的内容 document.getElementById(textarea的ID).value = 内容 改变 html 结构的内容 document.getElementById(标签的ID).innerText = 内容 适应手机端 搜索轻易查到在 head 标签里面加个 meta 1&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=yes\" /&gt; ## 逻辑设计 前端 在打开页面之后，立刻执行js代码，把后端传输过来的编码过的字符串解码，然后把html内容设置成解码后的内容 在 post 请求之前，利用 input 标签的 onclick 属性提前执行一段js代码，把内容编码然后再 post 后端 需要两个页面，一个是读取和编辑页面的 php，一个是处理 post 请求的页面 php，分别取名为 index.php 和 submit.php index.php 先读取文件，再编码文件，再显示到 testarea 的值里。 submit.php 先解码得到的内容，再把内容写入文件。 代码实现 在经过一段时间的实验和调试后，index.php 和 submit.php 的代码基本完工，以下是简易的初始版本，后续可以随时改进。项目地址在 https://github.com/fkxxyz/qnote index.php 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;fkxxyz&lt;/title&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=yes\" /&gt; &lt;style type=\"text/css\"&gt; form &#123; width:90%; &#125; textarea &#123; width:90%; overflow:auto; word-break:break-all; &#125; input &#123; width:120px; height:60px; font-size:20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form class=\"form\" name=\"editform\" method=\"post\" action=\"submit.php\"&gt; &lt;input type=\"submit\" onclick=\"encode_texta()\" value=\"提交\" /&gt; &lt;input type=\"button\" onclick=\"clear_texta()\" value=\"清空\"&gt; &lt;p&gt; &lt;textarea id=\"texta\" rows=\"20\" name=\"content\"&gt;&lt;?php $file=\"/srv/ftp/note.txt\"; echo base64_encode(rawurlencode(base64_decode(file_get_contents($file)))); ?&gt;&lt;/textarea&gt; &lt;/p&gt; &lt;/form&gt; &lt;script&gt; function t_encode(s)&#123; return window.btoa(encodeURIComponent(s)); &#125; function t_decode(s)&#123; return decodeURIComponent(window.atob(s)); &#125; function clear_texta()&#123; document.getElementById(\"texta\").value = \"\"; &#125; function encode_texta()&#123; texta = document.getElementById(\"texta\"); texta.value = t_encode(texta.value); &#125; function decode_texta()&#123; texta = document.getElementById(\"texta\"); texta.value = t_decode(texta.value); &#125; decode_texta(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; submit.php 123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;提交&lt;/title&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=yes\" /&gt; &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt; &lt;meta http-equiv=\"refresh\" content=\"1;url=/\" /&gt;&lt;/head&gt;&lt;/head&gt;&lt;body&gt; &lt;?php $file=\"/srv/ftp/note.txt\"; $f = fopen($file, \"w\") or die(\"服务器出错！无法打开文件。\"); fwrite($f, base64_encode(rawurldecode(base64_decode($_POST[\"content\"])))); fclose($f); echo \"&lt;h1&gt;提交成功&lt;/h1&gt;\"; echo \"&lt;div id=\\\"textd\\\"&gt;\"; echo $_POST[\"content\"]; echo \"&lt;/div&gt;\" ?&gt; &lt;/body&gt; &lt;script&gt; function t_decode(s)&#123; return decodeURIComponent(window.atob(s)); &#125; function decode_textd()&#123; textd = document.getElementById(\"textd\"); textd.innerText = t_decode(textd.innerText); &#125; decode_textd(); &lt;/script&gt;&lt;/html&gt; 效果展示 电脑端 手机端 电脑端更快速的处理 在服务器端，我没有直接把内容直接放到文件里，而是加了层 base64 编码放进去。 因为考虑到，在 linux 端，我服务器开了 ftp，我可以不用打开浏览器也能快速连接到服务器获取内容，由于传输也没有加密，为了不以明文传输所以也 base64 一下。 以下命令快速获取服务器的笔记内容 1curl -s ftp://地址/note.txt | base64 -d 把它保存为脚本，一执行，就能在控制台里面看到内容，美滋滋。 同样的思路，能不能不打开浏览器也能 post 呢，一查果真容易实现，curl 就能发送 post 请求，连 pyhon 都免了！ 以下命令快速记录笔记上传到服务器，返回错误代码 1curl -d \"content=$(cat | base64)\" http://地址/submit.php 写成脚本吧，获取状态码，返回是否成功 123456789#!/bin/bashcode=\"$(curl -d \"content=$(cat | base64)\" -o /dev/null -w %&#123;http_code&#125; -s http://地址/submit.php)\"echoif [ \"$code\" == \"200\" ]; then echo \"提交成功\"else echo \"出错，http 状态码： $code\"fi 脚本执行后，可以输入任意文字，按 Ctrl + D 结束输入开始提交。 至此，大功告成。 再也不用启动 QQ微信什么的了，也不需要局域网软件了。只要能联网，任意地方都能快速笔记互通了。 手机端 手机端就更简单了，用的按卓手机，加上 chromium 浏览器，把我的服务器地址添加到桌面快捷方式，桌面上随时点开粘贴，然后提交。 后续可能的改进 由于传输过程只是 base64 ，未加密，中途被拦截篡改或者泄露。 这个问题目前不需要解决，因为我个人不是什么重要机构信息没那么大的价值，也没有人恶意盯着陷害我，等以后有了安全需求再说。 谁都可以打开浏览器通过 http 协议访问我的服务器，只要知道我的服务器地址。 这个问题目前也不需要解决，因为我服务器私人用，也不会有谁故意捣乱。等到有这个需求再说，可以加个验证什么的。 有时候会有图片传输的需求，甚至文件传输的需求，一般都 ftp 或者在线私人网盘了，暂时也不需要。 美观。","categories":[{"name":"探究学习","slug":"探究学习","permalink":"https://fkxxyz.github.io/categories/%E6%8E%A2%E7%A9%B6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://fkxxyz.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"php","slug":"php","permalink":"https://fkxxyz.github.io/tags/php/"}]},{"title":"sed 命令从入门到精通","slug":"c/sed","date":"2019-11-29T08:03:38.000Z","updated":"2019-11-29T08:03:38.000Z","comments":true,"path":"c/sed/","link":"","permalink":"https://fkxxyz.github.io/c/sed/","excerpt":"作为 Linux 三剑客之一的 sed，shell 编程中掌握它是很有必要的。 本文用实验的方式循序渐进地学习 sed，可谓最科学的学习方式，一点一点遍历 sed 所有知识，实现真正的精通，同时还能作为速查。 快来动手跟着一起做吧！","text":"作为 Linux 三剑客之一的 sed，shell 编程中掌握它是很有必要的。 本文用实验的方式循序渐进地学习 sed，可谓最科学的学习方式，一点一点遍历 sed 所有知识，实现真正的精通，同时还能作为速查。 快来动手跟着一起做吧！ 入门实践 边实践边学习是真正掌握技能的唯一途径，下面从易到难来实验 sed 的各个命令。 实验准备 为了更好的实验，在临时目录建立一个文本文件以便测试。 123cd /tmpmkdir acd a 创建一个文本文件 a.txt ，并写入十行 12for a in $(seq 1 1 10); do echo line$a; done &gt; a.txtcat a.txt 以下是 a.txt 的内容 12345678910line1line2line3line4line5line6line7line8line9line10 开始实验 a 命令 —— 添加新行 在第 4 行的下面添加一行 newline 12345678sed '4anewline' a.txt# 4 表示第 4 行# a 表示添加# newline 表示要添加的行# 为了方便代码阅读，也可以加个'\\'或空格，写成如下等价形式sed '4a\\newline' a.txtsed '4a newline' a.txt 输出结果 1234567891011line1line2line3line4newlineline5line6line7line8line9line10 也可以一次性添加多行 1sed '4anewline1\\nnewline2' a.txt 输出结果 123456789101112line1line2line3line4newline1newline2line5line6line7line8line9line10 指定地址范围 , —— 范围分隔符 从第 4 行到第 8 行的所有行的下面分别添加一行 newline 12sed '4,8anewline' a.txt# 4,8 表示从第4行到第8行，用逗号隔开地址 输出结果 123456789101112131415line1line2line3line4newlineline5newlineline6newlineline7newlineline8newlineline9line10 + —— 到接下来几行 从第 4 行到其后两行的每一行分别添加一行 newline 12sed '4,+2anewline' a.txt# 4,+2 表示从第4行到第4+2行，等同于 4,6 输出结果 12345678910111213line1line2line3line4newlineline5newlineline6newlineline7line8line9line10 ~ —— 倍数匹配 从第 5 行到第一次遇到的 4 的倍数行的每一行分别添加一行 newline 12sed '5,~4anewline' a.txt# 5,~4 相当于第 5 行到从第 5 行开始，遇到行号为 4 的倍数的行为止，等价于 5,8 输出结果 1234567891011121314line1line2line3line4line5newlineline6newlineline7newlineline8newlineline9line10 ~ —— 步进 从第 5 行起，所有行号为 2 的倍数的行后面添加一行 newline 12sed '5~2anewline' a.txt# 5~2 表示从第 5 行起，所有行号为 2 的倍数的行 输出结果 12345678910111213line1line2line3line4line5newlineline6line7newlineline8line9newlineline10 $ —— 最后一行 从第 4 行到最后一行的每一行分别添加一行 newline 123sed '4,$anewline' a.txt# $ 表示最后一行# 4,$ 表示从第 4 行到最后一行 输出结果 1234567891011121314151617line1line2line3line4newlineline5newlineline6newlineline7newlineline8newlineline9newlineline10newline ! —— 范围取反 从第 4 行到第 8 行之外的所有行后面添加一行 newline 123sed '4,8!anewline' a.txt# ! 表示地址取反# 4,8! 表示从第 4 行到第 8 行之外的所有行 输出结果 123456789101112131415line1newlineline2newlineline3newlineline4line5line6line7line8line9newlineline10newline // —— 正则表达式范围 在匹配到 line4 的行后面添加一行 newline 123456sed '/line4/anewline' a.txt# /line4/ 表示匹配到 line4 的行# 等价于sed '\\?line4?anewline' a.txt# 其中 ? 可以替换成任意字符 输出结果 1234567891011line1line2line3line4newlineline5line6line7line8line9line10 在匹配到 line4 到第 6 行的行后面添加一行 newline 12sed '/line4/,6anewline' a.txt# /line4/,6 表示匹配到 line4 到第 6 行的行 输出结果 1234567891011line1line2line3line4newlineline5line6line7line8line9line10 i 命令 —— 插入新行 在第 4 行前插入一行 newline 1sed '4inewline' a.txt 输出结果 1234567891011line1line2line3newlineline4line5line6line7line8line9line10 d 命令 —— 删除 删除 4 到 8 行 12sed '4,8d' a.txt# d 表示删除 输出结果 12345line1line2line3line9line10 c 命令 —— 行替换 将 4 到 8 行替换成 newline 12sed '4,8cnewline' a.txt# c 表示替换 输出结果 123456line1line2line3newlineline9line10 p 命令 —— 打印 打印一遍 4 到 8 行 12sed '4,8p' a.txt# p 表示打印 输出结果 123456789101112131415line1line2line3line4line4line5line5line6line6line7line7line8line8line9line10 只打印 4 到 8 行 12sed -n '4,8p' a.txt# -n 表示不打印原文 输出结果 12345line4line5line6line7line8 从匹配到 “line4” 的行打印到匹配到 “ne6” 的行 12sed -n '/line4/,/e6/p' a.txt# 本例配合地址可灵活运用 输出结果 123line4line5line6 = 命令 —— 打印行号 从匹配到 “line4” 的行打印到匹配到 “ne6” 的行号 12sed -n '/line4/,/e6/=' a.txt# = 表示打印那一行的行号 输出结果 123456 s 命令 —— 正则替换 将第 4 行到第 8 行的 ne 替换成 on 123sed '4,8s/ne/on/' a.txt# s 表示替换# 格式为： s/正则表达式/要替换的内容/ 输出结果 12345678910line1line2line3lion4lion5lion6lion7lion8line9line10 s 命令最后跟个 g 表示替换该行所有匹配 1echo 'abcdabcd\\nbcdebcde' | sed 's/b/x/g' 输出结果为 12axcdaxcdxcdexcde 而不加 g 的 s 只能替换每一行匹配到的第一个 1echo 'abcdabcd\\nbcdebcde' | sed 's/b/x/' 输出结果为 12axcdabcdxcdebcde 正则表达式的实例 12345678sed '4,8s/\\(line\\)\\([[:digit:]]\\+\\)/\\2 - \\1/' a.txt# 4,8 表示从第 4 行到第 8 行# \\(line\\)\\([[:digit:]]\\+\\) 是正则表达式# \\1 表示正则表达式中第一个括号匹配的结果# \\2 表示正则表达式中第二个括号匹配的结果# 可以加 -r 参数开启扩展正则表达式，写成等价形式sed -r '4,8s/(line)([[:digit:]]+)/\\2 - \\1/' a.txt 输出结果为 12345678910line1line2line34 - line5 - line6 - line7 - line8 - lineline9line10 y 命令 —— 字符映射替换 将第 4 行到第 5 行按照字符映射 {e,i,l,n} -&gt; {o,c,e,h} 进行替换 1sed '4,5y/eiln/oceh/' a.txt 输出结果 12345678910line1line2line3echo4echo5line6line7line8line9line10 r 命令 —— 行替换为文件内容 12345# 先写入一个 b.txt 文件作为测试文件echo 'aaa\\nbbb' &gt; b.txtsed '4,5rb.txt' a.txt# r 表示以后面作为文件名读取文件内容进行替换 输出结果 1234567891011121314line1line2line3line4aaabbbline5aaabbbline6line7line8line9line10 {} —— 脚本块 在大括号内用分号隔开命令，可以实现执行多个命令 打印 3 到 4 行和 7 到 8 行 1234sed -n '&#123;3,4p;7,8p&#125;' a.txt# 最外层大括号可省略sed -n '3,4p;7,8p' a.txt 输出结果 1234line3line4line7line8 如果每个命令的地址相同，那么也可以类似于像分配律一样的语法 1234sed -n '4&#123;p;=&#125;' a.txt# 等价于sed -n '&#123;4p;4=&#125;' a.txt 输出结果 12line44 连 s 命令都能包含，体会到替换前和替换后的不同 1sed -n '4&#123;p;s/ne/on/;p;=&#125;' a.txt 输出结果 123line4lion44 大括号可以嵌套 1sed -n '&#123;4&#123;p;=&#125;;8&#123;=;p&#125;&#125;' a.txt 输出结果 1234line448line8 如果嵌套时，地址不同，则会取交集 sed -n '3,7{4,5p}' a.txt 12输出结果 line4 line5 1232. &#96;&#96;&#96;shell sed -n &#39;4,7&#123;3,6p&#125;&#39; a.txt 输出结果 123line4line5line6 h,H,g,G,x —— 空间交换相关 首先需要弄懂两个概念：模式空间、保持空间。 **模式空间：**sed 命令默认是一行一行处理的，每读取到一行，会放到模式空间里，然后执行脚本来处理模式空间的内容，处理完后会清空模式空间，并且读取下一行继续处理，如此循环直到行尾。模式空间相当于专门用于 sed 处理的字符串缓冲区。 **保持空间：**默认的 sed 是不会操作保持空间的，保持空间是专门为用户提供的空间，这几个命令可以操作保持空间，来实现更复杂的功能。 **h：**把模式空间内容覆盖到保持空间中 **H：**把模式空间内容追加到保持空间中 **g：**把保持空间内容覆盖到模式空间中 **G：**把保持空间内容追加到模式空间中 **x：**交换模式空间与保持空间的内容 将第 4 行和第 6 行复制到第 8 行后面。 12345sed '&#123;4h;6H;8G&#125;' a.txt# 4h 表示将第 4 行放入保持空间# 6H 表示将第 6 行加入保持空间# 8G 表示将保持空间内容追加到模式空间 输出结果 123456789101112line1line2line3line4line5line6line7line8line4line6line9line10 n,N,P,D —— 模式空间操作 有了模式空间的概念后，可以重新理解一下前面 p、d、n 等命令的本质。 **p：**打印当前模式空间所有内容，追加到默认输出之后。 **P：**打印当前模式空间开端至\\n的内容，并追加到默认输出之前。Sed并不对每行末尾\\n进行处理，但是对N命令追加的行间\\n进行处理，因为此时sed将两行看做一行。 **n：**命令简单来说就是提前读取下一行，覆盖模型空间前一行，然后执行后续命令。然后再读取新行，对新读取的内容重头执行sed。 **N：**命令简单来说就是追加下一行到模式空间，同时将两行看做一行，但是两行之间依然含有\\n换行符，然后执行后续命令。然后再读取新行，对新读取的内容重头执行sed。此时，新读取的行会覆盖之前的行（之前的两行已经合并为一行）。 **d：**命令是删除当前模式空间内容（不再传至标准输出）， 并放弃之后的命令，并对新读取的内容，重头执行sed。 **D：**命令是删除当前模式空间开端至\\n的内容（不在传至标准输出）， 放弃之后的命令，但是对剩余模式空间重新执行sed。 删除匹配 line4 行的下一行 12sed '/line4/&#123;n;d&#125;' a.txt# 操作到第 4 行时，提前读取第 5 行并删掉。 输出结果 123456789line1line2line3line4line6line7line8line9line10 打印偶数行 1234567sed -n '&#123;n;p&#125;' a.txt# n 命令表示操作每一行时，读取下一行，覆盖掉已经读取的这一行# p 表示打印出来# 每次循环时，模式空间中，奇数行全部被偶数行覆盖# 打印偶数行也可以用步进地址实现sed -n '2~2p' a.txt 输出结果 12345line2line4line6line8line10 删除匹配到 line4 行和下一行 12sed '/line4/&#123;N;d&#125;' a.txt# 操作到第 4 行时，提前读取第 5 行追加到模式空间，然后两行一起删掉。 输出结果 12345678line1line2line3line6line7line8line9line10 打印奇数行 12345sed –n '$!N;P' a.txt# 除了最后一行之外所有行，都提前读取下一行追加到模式空间，然后打印追加前的第一行，最后一行单独输出# 打印奇数行也可以用步进地址实现sed -n '1~2p' a.txt 输出结果 12345line1line3line5line7line9 每次提前读取三行，输出第一行 1sed -n '&#123;N;N;P&#125;' a.txt 输出结果 123line1line4line7 b —— 标签跳转 **b：**跳转到用冒号开头表示的标签 用标签跳转的方式实现：将除了匹配 line4 的行其它行的 ne 换成 on 12345678910sed '/line4/bend;s/ne/on/;:end' a.txt# 匹配到 line4 时，会执行 b 命令，跳转到最后的 :end 标签，也就相当于跳过了替换命令# 如果标签在前可能造成死循环，需要注意指定行# 当标签在最后时，可以省略，而且当 b 命令指定的标签不存在时，会自动跳转到最后# 所以可简写成sed '/line4/b;s/ne/on/' a.txt# 当然，可以用前面的地址范围取反来实现sed '/line4/!s/ne/on/' a.txt 输出结果 12345678910lion1lion2lion3line4lion5lion6lion7lion8lion9lion10 t —— 条件标签跳转 **t：**如果前一条命令执行成功，则跳转到用冒号开头表示的标签。 用条件标签跳转的方式实现：将除了匹配 line4 的行其它行的 ne 换成 on，4换成 F 12345678sed 's/4/F/;tend;s/ne/on/;:end' a.txt# 当标签在最后时，可以省略，而且当 b 命令指定的标签不存在时，会自动跳转到最后# 所以可简写成sed 's/4/F/;t;s/ne/on/' a.txt# 当然，可以用前面的地址范围取反来实现sed '/4/!s/ne/on/;/4/s/4/F/' a.txt 输出结果 12345678910lion1lion2lion3lineFlion5lion6lion7lion8lion9lion10 速查 以下内容使用谷歌翻译自 sed(1) - Linux man page 以及 sed --help，可供参考。 名称 sed - 流编辑器，用于过滤和转换文本 语法 sed [可选参数]… {脚本} [输入文件]… 如果未提供-e，-expression，-f或–file选项，则将第一个非可选参数用作要解释的sed脚本。 其余所有参数均为输入文件的名称； 如果未指定输入文件，那么将读取标准输入。 描述 Sed是流编辑器。 流编辑器用于对输入流（文件或来自管道的输入）执行基本的文本转换。 尽管在某种程度上类似于允许脚本编辑（例如ed）的编辑器，但sed通过仅对输入进行一次传递来工作，因此效率更高。 但是sed能够过滤管道中的文本，这使其与其他类型的编辑器特别有区别。 -n, --quiet, --silent 禁止自动打印模式空间 -e 脚本, --expression=脚本 添加“脚本”到程序的运行列表 -f 脚本文件, --file=脚本文件 添加“脚本文件”到程序的运行列表 –follow-symlinks 直接修改文件时跟随符号链接； 硬链接仍然会断开。 -i[扩展名], --in-place[=扩展名] 直接修改文件（如果指定扩展名则备份文件） -c, --copy 在 -i 模式下直接修改文件且备份时，使用复制操作而不是重命名。 尽管这样做可以避免断开链接（符号链接或硬链接），但最终的编辑操作不是原子的。 这很少是理想的模式。 --follow-symlinks通常就足够了，并且更快，更安全。 -l N, --line-length=N 指定“l”命令的换行期望长度 –posix 关闭所有 GNU 扩展 -E, -r, --regexp-extended 在脚本中使用扩展正则表达式（为保证可移植性使用 POSIX -E）。 -s, --separate 将输入文件视为各个独立的文件而不是单个长的连续输入流 -u, --unbuffered 从输入文件读取最少的数据，更频繁的刷新输出 –help 打印帮助并退出 –version 输出版本信息并退出 命令语法 这只是sed命令的简要提要，以提示那些已经知道sed的人。 必须参考其他文档（例如texinfo文档）以获取更完整的描述。 : 标签 b 和 t 命令的标签 # 注释 注释会一直延伸到下一个换行符（或**-e **脚本片段的末尾）。 } 关闭 {}块 的括号的右半括号 = 打印当前行号 a 文本 在模式空间后追加文本，该文本的每个嵌入换行符前都有一个反斜杠。 i 文本 在模式空间前插入文本，该文本的每个嵌入换行符前都有一个反斜杠。 q [退出代码] 立即退出 sed 脚本而不处理任何其他输入，除非如果未禁用自动打印，将打印当前图案空间。 退出代码参数是GNU扩展。 Q [退出代码] 立即退出 sed 脚本，而不处理更多输入。 这是一个GNU扩展。 r 文件名 从文件中读取的文本追加到模式空间中。 R 文件名 从文件中读取的文本追加到模式空间中。 每次调用该命令都会从文件中读取一行。这是一个GNU扩展。 { 启动 {}块 的括号的左半括号 b [标签] 跳转到标签； 如果省略了标签参数，则跳转到脚本结尾。 t [标签] 如果上一条读取的输入行被 s/// 命令替换成功，则跳转至标签 ; 如果省略标签，则跳转到脚本结尾。 T [标签] 如果上一条读取的输入行没有被 s/// 命令替换成功，则跳转至标签 ; 如果省略标签，则跳转到脚本结尾。这是一个GNU扩展。 c 文本 将所选行替换为文本，该文本的每个嵌入换行符前都有一个反斜杠。 d 删除模式空间。 开始下一个循环。 D 删除模式空间中的第一个嵌入的行。 从下一个循环开始，但是如果模式空间中仍有数据，则跳过从输入中读取的操作。 h H 复制/追加模式空间到保持空间。 g G 复制/追加保持空间到模式空间。 x 交换保持空间和模式空间的内容。 l 以“视觉清晰”的形式列出当前行。 l 宽度 以“视觉清晰”的形式列出当前行，并以根据指定宽度的字符将其断开。 这是一个GNU扩展。 n N 将输入的下一行读取/追加到模式空间。 p 打印当前模式空间 P 打印当前模式空间直到第一个嵌入式换行符。 s/正则表达式/替代串/ 尝试将正则表达式与模式空间进行匹配。 如果成功，则用替代串/替换该部分。替代串可以包含特殊字符 “&amp;” 来表示匹配的模式空间部分，而特殊转义 \\1 到 \\9 则表示正则表达式中的相应匹配子表达式。 w 文件名 将当前模式空间写入文件。 W 文件名 将当前模式空间的第一行写入文件。 这是一个GNU扩展。 y/源串/目标串/ 将模式空间中出现在源串中的字符翻译成目标串中的相应字符。 地址 sed命令可以不带地址，在这种情况下，将对所有输入行执行该命令。 具有一个地址，在这种情况下，该命令仅对与该地址匹配的输入行执行； 或使用两个地址，在这种情况下，将对所有输入行执行命令，这些输入行与从第一个地址开始一直延伸到第二个地址的所有行包括在内。 有关地址范围的三点注意事项：语法为“地址1,地址2”（即地址用逗号分隔）； 即使地址2选择了较早的行，也将始终接受与地址匹配的行； 如果地址2是正则表达式，则不会针对地址1匹配的行进行测试。 在地址（或地址范围）之后，在命令之前，! 可以插入，它指定仅当地址（或地址范围）不匹配时才执行命令。 数字 仅匹配指定的数字行。 首行~步进 匹配从首行开始的每个相隔步进的行。 例如，“ sed -n 12p”将打印输入流中的所有奇数行，并且地址25将与第二行开始的每第五行匹配。首行可以为零； 在这种情况下，sed 的操作就好像等于步进。 （这是一个扩展。） $ 表示最后一行。 /正则表达式/ 匹配正则表达式的行。 \\c正则表达式c 匹配正则表达式的行。c 可以是任何字符。 GNU sed 还支持一些特殊的2地址形式 0,地址2 从“匹配的第一个地址”状态开始，直到找到地址2。 这类似于“1,地址2”，不同之处在于，如果地址2与输入的第一行匹配，则“0,地址2”形式将在其范围的末尾，而“1,地址2”形式仍为在其范围的开始。仅当地址2为正则表达式时有效。 地址1,+N 将匹配地址1和地址1之后的 N 行。 地址1,~N 将匹配地址1和地址1之后的行，直到输入行号是 N 的倍数的下一行。 正则表达式 本来应该支持POSIX.2 BRE，但是由于性能问题，它们并不完全支持。 正则表达式中的 \\n 序列与换行符匹配，对于 \\a，\\t 和其他序列也是如此。 参考文献 sed(1) - Linux man page 菜鸟教程 —— Linux sed 命令 肖邦linux —— sed入门详解教程 DataCareer —— Sed命令n，N，d，D，p，P，h，H，g，G，x解析","categories":[{"name":"教程","slug":"教程","permalink":"https://fkxxyz.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://fkxxyz.github.io/tags/linux/"},{"name":"shell","slug":"shell","permalink":"https://fkxxyz.github.io/tags/shell/"},{"name":"sed","slug":"sed","permalink":"https://fkxxyz.github.io/tags/sed/"}]},{"title":"记一次 excel 文档的密码破解的探索","slug":"learn/excel-crack","date":"2019-11-26T08:11:08.000Z","updated":"2019-11-26T08:11:08.000Z","comments":true,"path":"learn/excel-crack/","link":"","permalink":"https://fkxxyz.github.io/learn/excel-crack/","excerpt":"周末的时候，有个以前的同学说自己的 excel 密码忘记，所以找我帮忙看有没有办法破解开来。 由于之前从来没接触过这样的实战，对加密解密仅仅只是了解的概念，基本都是理论知识，于是开始了实战探索之路。","text":"周末的时候，有个以前的同学说自己的 excel 密码忘记，所以找我帮忙看有没有办法破解开来。 由于之前从来没接触过这样的实战，对加密解密仅仅只是了解的概念，基本都是理论知识，于是开始了实战探索之路。 探索之路 已有知识 在印象中，几年前下载过这样的破解 office 密码的软件，名字是 Advanced Office Password Recovery，还接触过很多压缩包密码破解，听说过 wifi 密码破解等等。 根据所学过的知识，我将密码破解分为三类： **暴力破解：**这种方式是利用计算机高计算速度的特性，让程序按一定的规律或规则，一个一个试密码，直到试出来为止。 **逆向算法以及哈希碰撞：**一般的加密算法是不可能那么轻易可逆的，也没那么容易碰撞，一般只有顶尖的数学家密码学家牛人才能探索出这种算法，当今普遍采用的算法一般都是还没被探索出碰撞的。 伪加密直接清除密码：确切的说只对没有加密的文档管用，可以说是伪加密，仅仅是软件让你输入密码数对了才能访问到真正数据，而真正数据并未加密，严格说不算一种破解方法，局限性很大。 由于她用的是 excel 2013 的加密文档，然后去网上搜索 excel 2013 的解密，无一例外都是暴力破解的方式，和我想的一样，微软不可能傻到伪加密，也不可能用一些已经被破解了的不安全的算法，基本能确定只有暴力破解这一种方法。 软件尝试 这次破解密码，我首先尝试的是 Advanced Office Password Recovery，由于用的 archlinux 系统，直接使用 wine 来安装运行，启动成功。 先看看这款软件能否行的通吧，首先，我打开我电脑里已装好的 excel 2007，然后里面随便写点东西，然后加密保存，密码设为 qwertyuio，然后新建一个字典，随便输几行，并且把真实密码也放进去，打开这软件，加载字典，开始搜索，果然，秒出结果。证明了这软件还是行的通的。 字典构造 再搜集线索，这样可以缩小搜索范围，得知她设的是一句类似于“工作让我想死”的每个字的首字母组合，长度在 6～9 位，那么接下来让她想尽可能多的词语。比如“让人”、“令人”、“心烦”等等类似的词，首字母记下来。 然后再仔细想想其中的规律，”gz“肯定是开头两位，中间的词语不确定，有几个备选词语，结尾词语也不确定，同样几个备选，我设想这句话可以分为几个部分，每个部分都是一个词语，把每一部分写成一行，每一行里用逗号隔开词语的所有可能性，然后写了如下 txt 文档。 12345gz,zs,zdl,s,rw,rxf,xs 其中第二行逗号开头表示可缺省，那么一共有 1*3*3*2*2=36 种情况，虽然手动一个一个试是可以试完的，但是设想到万一都不对肯定要考虑别的词语，倒不如编个程序，根据上述 txt 文档来生成一个包含所有情况的字典，然后就可以放到破解软件里去跑，然后就可以随时加词语再生成字典再去跑。 说动手就动手，十分钟后，一个简易的 python 程序诞生。 1234567891011121314151617181920#!/bin/pythonwith open('a.txt') as f: r=f.read().strip()lines=r.split('\\n')words=[]for line in lines: words.append(line.split(','))l=len(words)def rec(s,i): if i==l: print(s) return for j in words[i]: rec(s+j,i+1)rec('',0) 思路也很清晰，固定读取 a.txt，用一个递归函数，一行一行的遍历，达到最深（最后一行）时打印出来此情况并且回溯。 开始破解 把程序生成的字典放到软件里去跑，立马出结果，说密码未找到，说明 36 种情况都不是。 于是把思路和规则告诉她，让她加词语，加情况。通过实验得知，我的电脑每秒钟能试 400 次密码。 然后加了几个词语继续试。 120种情况： 12345gz,zs,zd,ztml,s,rw,rxs,xf,fs,ns,ty 400种情况： 12345gz,z,t,y,u,I,o,p,g,h,j,k,l,v,b,n,ml,s,rw,rxs,xf,fs, 153900种情况（约6分钟） 123456gz,z,t,y,u,I,o,p,g,h,j,k,l,v,b,n,m,,d,s,h,xz,t,y,u,I,o,p,g,h,j,k,l,v,b,n,m,l,s,rz,t,y,u,I,o,p,g,h,j,k,l,v,b,n,m,w,rxs,xf,fs,xyqs,xqs 均未果。 再后来，她觉得，大周末的也挺麻烦的，而且反正也不是什么重要的东西，文档也可以慢慢补回来，就决定放弃了。 尽管没能解决问题，也不重要了，给她带来的陪伴价值是很珍贵的，同时也让我有了一些破解经验。 后续探索 在闲暇之余，我开始去网上搜相关的文章博客论坛等等，看看别人的破解经验，在浏览了 20+ 篇的文章之后，发现了这么一个软件：hashcat，自称是世界上最快的最先进的密码恢复工具，而且还开源免费，支持包括 MS Office 2013 在内的上百种类型的 hash 破解。 看了介绍就觉得是神器，我必须试试了。 尝试用 hashcat 破解 linux 用户登录密码 在 CSDN上 hashcat的学习和使用记录 这篇博客的引导下，我开始了第一次尝试，尝试实验破解 linux 的用户登录密码。 建立测试用户 首先，建立一个新用户 qwer，密码为 123456 123sudo useradd -m qwersudo passwd qwer# 然后输入两次 123456 尝试登录 12su - qwer# 然后输入密码 123456 登录成功。 提取哈希 我知道，用户的密码是哈希加密之后，放在了 /etc/shadow 里，这个文件对普通用户是没有读取权限的，只有 root 用户能访问，直接查看这文件，取得哈希。 1sudo cat /etc/shadow | grep qwer 输出结果为 1qwer:$6$teTb&#x2F;7A1JUDBJ3Ea$oU8XOGYd.nN96vi7x0yzFdrhQVk5IcK4AHn&#x2F;gKPcBFHuXtFtFsF64628pPQBI0yEeJH47E5jqLdgTZkYUR7Rs1:18225:0:99999:7::: 保留 hashcat 所需要的值，去掉不需要的之后 1$6$teTb&#x2F;7A1JUDBJ3Ea$oU8XOGYd.nN96vi7x0yzFdrhQVk5IcK4AHn&#x2F;gKPcBFHuXtFtFsF64628pPQBI0yEeJH47E5jqLdgTZkYUR7Rs1 把这串值写到一个文本文件里，建个工作目录放进去吧 1234cdmkdir hashcatcd hashcatecho '$6$teTb/7A1JUDBJ3Ea$oU8XOGYd.nN96vi7x0yzFdrhQVk5IcK4AHn/gKPcBFHuXtFtFsF64628pPQBI0yEeJH47E5jqLdgTZkYUR7Rs1' &gt; hash.txt 这样，哈希文件就准备好了。 构造字典 总得要构造个字典才能实验，虽然能直接指定掩码暴力的方式，但我更钟爱字典。 继续写个简易的 python 程序来构造一个字典吧 12345#!/bin/bashimport itertoolsit = itertools.product('1234567890', repeat=6)for a in it: print(''.join(a)) 然后运行这个程序 12chmod +x gendict./gendict &gt; dict.txt 然后看看正确密码在哪一行 1cat dict.txt | grep -n 123456 得知在第 987655 行，要搜索这么多次，正好可以看看 hashcat 有多快。 开始破解 直接执行 1hashcat -m 1800 -a 0 -o output.txt hash.txt dict.txt 各参数解释 -m 1800 指定 hash 的类型的 id ，这里是破解 linux 密码所以 id 是 1800，通过 hashcat --help 可以看到解密不同类型 hash 的 id。 -a 0 指定攻击模式， 0代表字典，3代表掩码暴力等等，这里直接指定字典。 -o output.txt 指定破解出来之后，输出结果保存的文件。 hash.txt 指定要破解的 hash 文件。 dict.txt 指定字典。 ok，按回车之后，提示失败，输出结果 123456hashcat (v5.1.0) starting...clGetPlatformIDs(): CL_PLATFORM_NOT_FOUND_KHRStarted: Wed Nov 25 22:20:45 2019Stopped: Wed Nov 25 22:20:45 2019 这是为什么呢，百度了一下 clGetPlatformIDs 这个函数，查到应该是个 opencl 相关的函数，这个函数顾名思义，这是在寻找平台吗，也就是 hashcat 默认是要用 GPU 来破解计算的，哈哈，难怪堪称世界第一。那好嘛，我的 nvidia 显卡肯定是被大黄蜂禁用的状态，你会 not found 很正常咯，我直接启用。 1optirun hashcat -m 1800 -a 0 -o output.txt hash.txt dict.txt 这下好像成功了，开始破解了，虽然看到一些警告。 最后一行是 1[s]tatus [p]ause [b]ypass [c]heckpoint [q]uit &#x3D;&gt; 可以看出是几个选项，可以输首字母来操控，输入个 s 提示了以下信息 12345678910111213141516Session..........: hashcatStatus...........: RunningHash.Type........: sha512crypt $6$, SHA512 (Unix)Hash.Target......: $6$teTb&#x2F;7A1JUDBJ3Ea$oU8XOGYd.nN96vi7x0yzFdrhQVk5IcK...UR7Rs1Time.Started.....: Wed Nov 25 22:42:10 2019 (36 secs)Time.Estimated...: Wed Nov 25 23:10:08 2019 (27 mins, 22 secs)Guess.Base.......: File (dict.txt)Guess.Queue......: 1&#x2F;1 (100.00%)Speed.#1.........: 596 H&#x2F;s (10.19ms) @ Accel:32 Loops:16 Thr:32 Vec:1Recovered........: 0&#x2F;1 (0.00%) Digests, 0&#x2F;1 (0.00%) SaltsProgress.........: 20480&#x2F;1000000 (2.05%)Rejected.........: 0&#x2F;20480 (0.00%)Restore.Point....: 20480&#x2F;1000000 (2.05%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:1968-1984Candidates.#1....: 080620 -&gt; 088583Hardware.Mon.#1..: Temp: 64c 很容易读懂这些信息，我最关心的是速度，速度是 596 次每秒，那么…正确密码在 987655 行，算一算需要 27 分钟才能找到密码。 我只是想尝试一下而已，不想费那么久时间还烧显卡。直接输入 q 退出。然后手动打开字典改一改，把 123456 放到大概一万行的位置吧，然后再执行破解。 很快，执行结束了，出结果了。 12345678910111213141516171819Session..........: hashcatStatus...........: CrackedHash.Type........: sha512crypt $6$, SHA512 (Unix)Hash.Target......: $6$teTb&#x2F;7A1JUDBJ3Ea$oU8XOGYd.nN96vi7x0yzFdrhQVk5IcK...UR7Rs1Time.Started.....: Wed Nov 25 22:50:57 2019 (21 secs)Time.Estimated...: Wed Nov 25 22:51:18 2019 (0 secs)Guess.Base.......: File (dict.txt)Guess.Queue......: 1&#x2F;1 (100.00%)Speed.#1.........: 602 H&#x2F;s (10.22ms) @ Accel:32 Loops:16 Thr:32 Vec:1Recovered........: 1&#x2F;1 (100.00%) Digests, 1&#x2F;1 (100.00%) SaltsProgress.........: 12288&#x2F;1000000 (1.23%)Rejected.........: 0&#x2F;12288 (0.00%)Restore.Point....: 10240&#x2F;1000000 (1.02%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:4992-5000Candidates.#1....: 090860 -&gt; 098823Hardware.Mon.#1..: Temp: 67cStarted: Wed Nov 25 22:50:37 2019Stopped: Wed Nov 25 22:51:19 2019 在第二行 Status…: Cracked ，可以得知已经破解了。然后 ls 一下发现果然有个 output.txt，执行 1cat output.txt 看看结果 1$6$teTb&#x2F;7A1JUDBJ3Ea$oU8XOGYd.nN96vi7x0yzFdrhQVk5IcK4AHn&#x2F;gKPcBFHuXtFtFsF64628pPQBI0yEeJH47E5jqLdgTZkYUR7Rs1:123456 好的，这次尝试很顺利，123456 被破解出来了。 尝试用 hashcat 破解 excel 密码 已经熟悉了 hashcat 的基本使用了，该用它试试满足我的需求了。 得知提取 office 文档的 hash 用的是开源的 office2john，可以直接下载 1wget https:&#x2F;&#x2F;github.com&#x2F;magnumripper&#x2F;JohnTheRipper&#x2F;raw&#x2F;bleeding-jumbo&#x2F;run&#x2F;office2john.py 然后执行它，指定要破解的 xlsx 文件。 1python office2john.py 2.xlsx &gt; 2.hash 然后看看 2.hash 的内容，把开头的 2.xlsx 和冒号去掉。 用 hashcat --help 查询得知 office 2013 的加密方式 id 是 9600，那我可以用原来 python 生成的字典开始了。 1optirun hashcat -m 9600 -a 0 -o output.txt 2.hash dict.txt 很快，又跑起来了。看到，速度，只有？158 H/s ？？还没有 Advanced Office Password Recovery？ 说好的世界第一呢？ 严重失误的发现 抱着好奇的态度，我再次打开 Advanced Office Password Recovery，然后打开 2.xlsx ，加载字典，然后开始，发现速度只有 16 H/s ？？ 那么我前面那个实验得出的 400 次每秒是怎么回事，难道是我刚刚把电脑烧烫了，速度就慢了？那也不该慢这么多，我重复着之前的动作，发现，我之前一直加载的根本不是 2.xlsx ，而是用的我自己最开始实验的时候，用 excel 2007 加密的文档！我再次打开我那用来实验加密的 excel 2007 的文档，发现速度又是 400次每秒了。 也就是说，我后来帮她破解的时候，根本没有选对文件，我一直破解的是我自己加密的文档，这是一个严重的失误，导致我后续的暴力破解全都是无效的破解。 然后后续继续实验，作出对比总结 用 Advanced Office Password Recovery ： 破解 office 2007 速度为 400 H/s 破解 office 2013 速度为 16 H/s 用 hashcat ： 破解 office 2007 速度为 2221 H/s 破解 office 2013 速度为 158 H/s 用 GPU 计算确实速度快了不少，虽然我这是几年前的垃圾卡。 对于失误，我后来又重新用 hashcat 跑了一遍，之前生成的字典，那个15万次的用了半小时。然后发现 hashcat 有个细节很贴心 1Watchdog: Temperature abort trigger set to 90c 温度超过 90 度时自动停止，休息一会，然后可以运行 hashcat --restore 来接着上次的破解，能很好的保护机器，后续探索发现会话保存在 ~/.hashcat/session 里面，也可以用命令行参数来指定会话的位置，看来，hashcat 是一个很成熟考虑周全的软件了，有时间的话，我会总结出它所有的功能用法，列出来以便以后使用。 发现失误后，用 hashcat 加载以前的字典，跑了半小时还是没跑出来，不过这次经历让我收获很多。 总结 hashcat 能破解上百种类型的 hash，而且支持 GPU 运算，对高性能的显卡来说速度会更快。那么破解 hashcat 支持的 hash 类型，我把步骤程序化，以后遇到要破解的问题都按这个思路了。 提取要破解的 hash 每种文档或者密码，提取 hash 的方式不同，以后遇到什么样的密码，可以现查资料。 尽可能搜集多的关于密码的情报 这一步主要是为了生成字典，尽可能了解多的信息，来缩小搜索范围。 生成字典 生成字典可以自己写 python 程序来实现，可以妙用迭代器来快速生成，也可以利用 crunch 等软件来生成字典。 用 hashcat 开始破解 破解的过程中可能出现温度过高的情况，那么可以用计划任务的方式尽情发挥想象力破解。","categories":[{"name":"探究学习","slug":"探究学习","permalink":"https://fkxxyz.github.io/categories/%E6%8E%A2%E7%A9%B6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"python","slug":"python","permalink":"https://fkxxyz.github.io/tags/python/"},{"name":"信息安全","slug":"信息安全","permalink":"https://fkxxyz.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"}]},{"title":"探索如何更方便的管理和部署 hexo 博客","slug":"learn/hexo/management","date":"2019-11-22T17:09:15.000Z","updated":"2020-06-19T23:08:43.000Z","comments":true,"path":"learn/hexo/management/","link":"","permalink":"https://fkxxyz.github.io/learn/hexo/management/","excerpt":"在学会使用 hexo 的基本操作后，发现使用和部署的过程中，遇到几个问题，在此罗列出来逐一解决。","text":"在学会使用 hexo 的基本操作后，发现使用和部署的过程中，遇到几个问题，在此罗列出来逐一解决。 遇到的不便之处 由于使用很多主题的过程中，需要对 _config.yml、模块目录 node_modules 进行大量修改，当想要换主题时，得重新用新的 _config.yml ，如果模块不重装，则可能会有大量不需要的模块留下来。因此，要更换主题，不得不重新初始化建立博客目录，但是博客的源文件保存在 source 里面，重新 hexo init 初始化后，需要又需要保留原来的 source，同样，hexo deploy 部署用的是 .deploy_git 目录，需要备份。 每次 hexo init 时会克隆 hexo-starter 和 hexo-theme-landscape 仓库，而 landscape 主题很大，国内克隆这个大仓库耗费时间，而这个仓库是默认主题，通常是不需要的。 每次 hexo init 后都需要 npm install 来安装模块。 在使用的过程中，如果 source 放到本机，要是本机故障或者突发情况导致 source 目录没了，那么损失会惨重。 解决思路 对于以上问题，想出一些一劳永逸的解决思路。 对所有需要保存的重要的东西，托管到 github。 改用 npm 来直接从淘宝镜像站自动安装 hexo，并且安装其依赖，写成一个脚本，大幅度提升效率。 本地存一份保存重要的东西的仓库，包括 source 目录，将 source 目录用符号链接的方式链接到博客的主目录。 将 .deploy_git 放到自己的本地 github 仓库目录 ，同样用符号链接的方式链接到博客的主目录。 将主题目录的改动也记录到此仓库，用符号链接的方式对应过去，这里来可以妙用 cp 的 -s 参数。 以上一切可以使用 shell 脚本来自动化，快速快速更换主题，同时 shell 脚本本身也可以算作重要的东西托管到 github。 解决方案 建立重要的仓库 在 github 上建立一个仓库名为 fkxxyz-blog-src 的仓库，用来保存重要的信息，如配置好的初始 _config.yml 、source 目录、自动化脚本，其中， _config.yml 保存两份，一份是由默认的 _config.yml 模板修改成自己的信息得到，取名为 _config-fkxxyz.yml，一份是由 _config-fkxxyz.yml 修改成当前使用的主题相关的配置。 12345678910111213141516# 克隆刚建好的空仓库cd ~/github.com/fkxxyzgit clone https://github.com/fkxxyz/fkxxyz-blog-src.gitls# 保存重要信息到这个仓库cd fkxxyz-blog-srccp -r ~/myblog/source .cp ~/myblog/_config.yml _config-fkxxyz.ymlcp ~/myblog/_config.yml .touch README.md# 提交上传仓库git add -Agit commit -m 'first commit'git push 编写一键脚本 首先设计这个脚本，这个脚本放在 fkxxyz-blog-src 仓库目录中运行，功能是解压指定的博客目录模板压缩包到特定位置，脚本名为 setup。 123cd ~/github.com/fkxxyz/fkxxyz-blog-srctouch setupchmod +x setup 然后编写 setup，由于以后随时会更新完善，实时内容详见 https://github.com/fkxxyz/fkxxyz-blog-src/blob/master/setup 为了方便起见再编写两个脚本 gen 和 push， gen 用于复制修改过主题到目标目录，并且一键 hexo clean、hexo generate；push 用于一键 hexo deploy 。 最后，不忘把此仓库复制到服务器。 123git add -Agit commit -m updategit push 测试解决效果 现在，所有的一切工作都可以在 ~/github.com/fkxxyz/fkxxyz-blog-src 目录里进行了，首先切换到此目录。 1cd ~/github.com/fkxxyz/fkxxyz-blog-src 下面开始逐一测试效果。 更换主题 123./setup# 然后下载 jacman 主题，放到 ~/hexo/themes/jacman 生成网站 123./gen# 然后根据提示打开浏览器，进入地址 http://localhost:4000 进行测试。 上传改动 123./push# 然后打开浏览器，输入自己域名 www.fkxxyz.com 查看效果。 写博客 一切写博客的操作都在当前目录的 source 里，手动复制模板来完成，写完之后，可以 ./gen 生成然后测试，然后 ./push 上传。 尾声 这下可算是大功告成了，以后再也不怕换主题了，也不会怕丢失什么了，以后终于能够把一切精里放在写博客上了，达到了一劳永逸的效果。 接下来，我打算把我以前写的 md 文档，一个一个格式化，放到此博客上。","categories":[{"name":"探究学习","slug":"探究学习","permalink":"https://fkxxyz.github.io/categories/%E6%8E%A2%E7%A9%B6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"https://fkxxyz.github.io/tags/archlinux/"},{"name":"hexo","slug":"hexo","permalink":"https://fkxxyz.github.io/tags/hexo/"}]},{"title":"探究在 archlinux 上用 hexo 建立个人的博客","slug":"learn/hexo","date":"2019-11-22T09:49:44.000Z","updated":"2019-11-22T09:49:44.000Z","comments":true,"path":"learn/hexo/","link":"","permalink":"https://fkxxyz.github.io/learn/hexo/","excerpt":"archlinux 的官方仓库里面没有 hexo 这个包，而 aur 里有个，但是装了之后发现一些问题导致一头雾水，目录也很乱，不得不自己想办法探究探究原理，要明白彻底一点问题才能解决。","text":"archlinux 的官方仓库里面没有 hexo 这个包，而 aur 里有个，但是装了之后发现一些问题导致一头雾水，目录也很乱，不得不自己想办法探究探究原理，要明白彻底一点问题才能解决。 探究 hexo 如何在 archlinux 上运行 首先看看官方文档得知 Hexo是一个用 node.js 实现的博客框架，然后看了 node.js的archwiki 得知，npm 是 node.js 的包管理器 。 然后根据 wiki 上描述装上 nodejs 和 npm 1pacman -S nodejs npm 然后习惯性查看他们的信息和目录结构 1234pacman -Qi nodejspacman -Qi npmpacman -Ql nodejspacman -Ql npm 根据输出结果，发现一个庞大的目录 /usr/lib/node_modules，进去瞧瞧 123cd /usr/lib/node_moduleslsfind 显而易见的是，安装的 node.js 模块都被放在 /usr/lib/node_modules 里，里面每个子目录对应一个 node.js 模块，一开始有三个模块 node-gyp、npm、semver。 再看看这个 /usr/lib/node_modules 目录都有那些 archlinux 的软件包包含 1pacman -Qo . 更加确定了模块都是装在这个目录里，而且一个 archlinux 的软件包对应一个 node.js 模块，正如 python3.8 的模块都是装在 /usr/lib/python3.8/site-packages 里一样。 那么 npm 和 node.js 的关系，正如 pip 和 python 的关系一样。 类比一下可知，要装 hexo ，就得把 hexo 也打成 archlinux 的包，hexo 模块应该被放在 /usr/lib/node_modules/hexo 里。 首先看看 aur 里面有没有这样一个包 1yay hexo 发现已经有了，包名是 nodejs-hexo，直接安装。装完后看看结果 123pacman -Ql hexols -l /usr/lib/node_moduleshexo 虽然能用，但是发现问题很大，/usr/lib/node_modules/hexo 的所有者是当前用户，而不是 root，可能打包的人的失误，也可能是使用的过程中需要修改这个目录？我觉得打包的人的失误可能性要大一些，毕竟这是模块目录怎么会被用户随便改。于是打算以后再解决这个问题，自己写 PKGBUILD，先能用了，建成了博客再说。 安装 hexo 暂时这么安装 1yay -S nodejs-hexo 建站 根据 hexo的官方建站文档 ，由于第一次建，没经验，先测试，建立到 /tmp 目录下 123mkdir /tmp/acd /tmp/ahexo init myfolder 等了很久之后，才结束，根据提示信息得知，hexo init 命令干了两件事： 将 https://github.com/hexojs/hexo-starter.git 克隆到 /tmp/a/myfolder 将 https://github.com/hexojs/hexo-theme-landscape.git 克隆到 /tmp/a/myfolder/themes/landscape 12345cd myfolderlsfindnpm installfind 前后对比发现，npm install 这条命令可能是补充了所有 node.js 模块到 /tmp/a/myfolder/node_modules 里。 然后通过官网介绍，加上自己百度，大概得知了这里面大概各个目录的作用： config.yml 网站相关的配置文件 package.json 一开始不知道干嘛的，不过看内容可以猜测出，这整个目录是个应用程序，需要依赖很多模块，而这些所要依赖的模块放在 node_modules 里。 node_modules 整个应用程序所有依赖的模块，由 npm 管理。 scaffold 模板，大概是新建文章的时候要用。 source 应该是个人写的所有东西都在这里面，平时写东西都在这写 md 格式的文章，图片也往这放。 themes 顾名思义主题。 public 可能是将 source 的东西翻译建成网站之后的结果，一系列 html 文件，最终要发布的结果。 大概了解后进入下一章。 配置 根据 官方文档-配置 ，编辑 _config.yml，里面的数据随便填写。通过这个页面，我得知： 所有自定义配置围绕着这个文件修改。 可以配合域名，设置网站主页地址 原来 source、public 的目录位置都可以改，非常灵活。 连配置文件本身都能用参数额外指定。 尝试各种命令 根据 官方文档-命令 ，开始一条一条尝试里面的命令。 init 上面已经试过。 new 新建一篇文章，文章名为“第一篇文章” 1hexo new 第一篇文章 看看效果 1find | grep 第一篇文章 果然，在 source 里面找到了 第一篇文章.md 这个文件。 接下来实验各种参数 12hexo new 第二篇文章 -s wwwwwwwwwwwwwhexo new 33333 -p aaa/bbb 然后检查所有的变化 12345grep -rn wwwwwwwwwwwwwfind | grep wwwwwwwwwwwwwgrep -rn 33333find | grep aaa/bbbgrep -rn aaa/bbb 发现所有改动全在 source 这个目录里。 那么得出结论，hexo new 这条命令本质是在 source/_posts 里面创建相应的 md 文件，我完全可以自己手动创建这些文件，和 hexo new 命令达到同样的效果。 查看这些文件内容 1cat source/_posts/第一篇文章.md 发现是不是和前面模板文件内容类似呢 1cat scaffolds/post.md generate 直接执行试试 1hexo generate 生成静态文件，顾名思义是把 sources 里面所有的东西，处理成了 html 文件放在了 public 目录里，检验猜想 1find public 恩？有 index.html ，好奇用浏览器打开试一下 1chromium public/index.html 哈啊，看到一个简陋的架子，也许是没把主题加上。继续往后看吧。 server 直接执行试试 1hexo server 然后浏览器里面输入网址 http://localhost:4000 这下看到主题了，也能看到自己刚刚创建的 第一篇文章、第二篇文章、33333，还有最初始的 Hello World 联想到 github 提供的仓库可以建成网站，那我现在是不是就可以把 public 这个目录上传上去了呢，但是静态网站会不会加上主题呢？说试试就试试： 打开 github 网站登录自己的帐号 fkxxyz，根据要求创建一个仓库名是 fkxxyz.github.io 的仓库，然后找个地方开始动手 1234567mkdir /tmp/bcd /tmp/bgit clone https://github.com/fkxxyz/fkxxyz.github.io.gitcp -r /tmp/a/myfolder/public/* .git add -Agit commit -m updategit push 一顿操作之后，打开 https://fkxxyz.github.io/ 果然，出现了网站。 那么我把自己的域名 www.fkxxyz.com 解析到这个网址，博客等于已经建成了。 deploy 直接执行 1hexo deploy 好像没什么用，查资料据之后，发现这条命令是代替上述一顿操作，能自动把 public 上传到 github 中自己的仓库，何乐而不为？直接看相应的官方介绍 github-pages 和 one-command-deployment 1234cd /tmp/a/myfolder## 安装模块npm install hexo-deployer-git --save 修改 _config.yml ，将最后改成 1234deploy: type: git repository: https://github.com/fkxxyz/fkxxyz.github.io.git branch: master 然后再执行 1hexo deploy 这下有反应了，大功告成。 下篇文章准备写个教程总结，整理一下，今天探索到的一切。","categories":[{"name":"探究学习","slug":"探究学习","permalink":"https://fkxxyz.github.io/categories/%E6%8E%A2%E7%A9%B6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"https://fkxxyz.github.io/tags/archlinux/"},{"name":"hexo","slug":"hexo","permalink":"https://fkxxyz.github.io/tags/hexo/"}]},{"title":"用 python 实现 xmind 和 mindjet 格式互转","slug":"d/mmconv","date":"2019-09-28T02:34:51.000Z","updated":"2019-09-28T02:34:51.000Z","comments":true,"path":"d/mmconv/","link":"","permalink":"https://fkxxyz.github.io/d/mmconv/","excerpt":"一直想找一款跨平台的免费又好用的思维导图软件，可是哪有两全其美的事呢，个人感觉安卓版的 mindjet 相对好用一些，windows 和 linux 版的 xmind 相对好用一些，但是 xmind 和 mindjet 的格式肯定是不兼容的，而探索发现，他们的文档解压之后都是以 xml 方式储存的，压缩也是简单的 zip 压缩，也没有任何加密，于是，故事开始了。","text":"一直想找一款跨平台的免费又好用的思维导图软件，可是哪有两全其美的事呢，个人感觉安卓版的 mindjet 相对好用一些，windows 和 linux 版的 xmind 相对好用一些，但是 xmind 和 mindjet 的格式肯定是不兼容的，而探索发现，他们的文档解压之后都是以 xml 方式储存的，压缩也是简单的 zip 压缩，也没有任何加密，于是，故事开始了。 简介 经过大概八小时的开发后，这样一个转换器成功诞生。这是一款用 python3 实现的简单的 xmind 与 mindjet 格式之间的互转工具，只保留树状思维导图以及折叠功能，另外还可以额外可以转化成 txt，用缩进来表示树状图。 后来发现 xmind-zen 保存的文档无法在 xmind8 中打开，所以又添加了 xmind-zen 文档的支持。 项目已放到 github 开源，以便保存和后续随时修改。 https://github.com/fkxxyz/mmconv 实现原理 数据结构 利用 python 的列表嵌套列表来储存思维导图的树状结构，例如 1234567o├── a│ ├── 1│ ├── 2│ └── 3├── b└── c 以上树状结构在代码中被储存为 12345['o', False, [['a', False, [['1', False, []], ['2', False, []], ['3', False, []]]], ['b', False, []], ['c', False, []]]] 其中 False 表示未被折叠 各个文档格式的存取 xmind 8 xmind 8 保存的格式是 zip 格式，解压后得到若干个文件，树状图数据以 xml 格式保存在 content.xml 里面。 xmind-zen xmind-zen 保存的格式是 zip 格式，解压后得到若干个文件，树状图数据以 json 格式保存在 content.json 里面。 Mindjet Maps Mindjet Maps 保存的格式是 zip 格式，解压后得到一个文件 Document.xml，树状图数据以 xml 格式保存在其中。 txt 这是我自己创建的文本文档格式方便调试储存和转换，用缩进的方式表示树状图，用垂直制表符表示是否被折叠 代码风格易扩展，后续随时可以添加更多格式的支持，可以在 Issues 里面提出，有时间我会补充。 用法 命令格式 1mmconv.py 源文件 [目标文件] [-t 格式] 参数详解 12345678910111213位置参数： 源文件 表示要转换的文件。 目标文件 目标文件名。转换成功的保存的文件路径。 如果未指定目标文件，则直接打印源文件类型。可选参数： -h, --help 显示此帮助消息并退出 --type &#123;txt,mmap,xmind,zen&#125;, -t &#123;txt,mmap,xmind,zen&#125; 指定目标文件的类型。目前支持以下类型： xmind - XMind 8 文档 zen - XMind zen 文档 txt - txt 文本文档 mmap - Mindjet maps 文档 若未指定 --type 类型参数，则默认为 txt。 源文件的格式不用指定，会自己识别，详见 --help 用法示例 1234567891011# 将 a.xmind 转换成 txt 格式mmconv.py a.xmind a.txt# 将 a.xmind 转换成 mmap 格式mmconv.py -t mmap a.xmind a.mmap# 将 a.txt 转换成 xmind 格式mmconv.py -t xmind a.txt a.xmind# 将 a.xmind 转换成 xmind-zen 格式mmconv.py -t zen a.xmind b.xmind","categories":[{"name":"原创开发","slug":"原创开发","permalink":"https://fkxxyz.github.io/categories/%E5%8E%9F%E5%88%9B%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"python","slug":"python","permalink":"https://fkxxyz.github.io/tags/python/"},{"name":"思维导图","slug":"思维导图","permalink":"https://fkxxyz.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"}]},{"title":"任意 linux 发行版下用 wine 安装 office2007 完美运行","slug":"c/wine/office2007","date":"2019-05-21T07:20:36.000Z","updated":"2019-05-21T07:20:36.000Z","comments":true,"path":"c/wine/office2007/","link":"","permalink":"https://fkxxyz.github.io/c/wine/office2007/","excerpt":"在 linux 下，尝试过各种办公软件之后，总是和微软的 office 格式有些差异，怎么也找不到完美的 office 替代品。 于是想到了 wine，配合谷歌和百度之后，得知在众多 office 版本中，wine 对 office 2007 这个版本支持是最完美的，于是开始了折腾之路，产生了这篇教程。","text":"在 linux 下，尝试过各种办公软件之后，总是和微软的 office 格式有些差异，怎么也找不到完美的 office 替代品。 于是想到了 wine，配合谷歌和百度之后，得知在众多 office 版本中，wine 对 office 2007 这个版本支持是最完美的，于是开始了折腾之路，产生了这篇教程。 下载 office2007 的官方 iso 光盘镜像 个人推荐亲测可用的 office2007 镜像 http://www.songyongzhi.com/Office2007.html 安装 wine 各大发行版安装 wine 的方法不同，可以自己百度或谷歌其安装方法。下面介绍 archlinux 和 deepin 两个的发行版安装 wine 的方法。 archlinux 发行版中安装 wine 启用 multilib 仓库，编辑 /etc/pacman.conf，取消下面内容的注释，此步骤详见官方wiki 官方仓库multilib 12[multilib]Include = /etc/pacman.d/mirrorlist 然后使用包管理器安装 wine 1sudo pacman -S wine deepin 发行版中安装 wine 1sudo apt-get install wine 验证 wine 是否安装成功 终端中执行 wine，如果提示类似以下信息，则代表安装成功 123Usage: wine PROGRAM [ARGUMENTS...] Run the specified program wine --help Display this help and exit wine --version Output version information and exit 安装 winetricks 对于archlinux，官方仓库有winetricks所以能直接安装，直接执行 sudo pacman -S winetricks 即可 对于其他发行版，可以手动下载安装（以下步骤若是执行出错，提示缺少什么就装什么，如 wget 命令未找到，就用包管理器安装 wget） 12345678910111213141516171819# 安装依赖的组建sudo apt-get install cabextract# 下载仓库wget https://github.com/Winetricks/winetricks/archive/master.zip# 解压仓库unzip master.zip# 进入仓库目录cd winetricks-master# 安装到系统sudo make install# 清理刚刚下载、解压的文件cd ..rm -r winetricks-masterrm master.zip 检验 winetricks 是否安装成功 1winetricks --help 显示出很多帮助信息，则安装成功。 建立一个自定义的 office2007 的 wine 容器 在家目录中随便找个位置用于保存 office2007 的容器安装目录，下面以 ~/wine/office2007 为例 123456# 设置 wine 的环境变量WINEPREFIX=~/wine/office2007WINEARCH=win32# 建立容器目录winecfg 在弹出的 wine设置中，最好将 windows 版本设置成 Windows XP，然后点确定。 然后开始用 winetrick 安装 office2007 12345# 挂载安装光盘，注意把下载好的iso文件替换成你实际下载好的路径sudo mount &lt;下载的iso文件路径&gt; /mnt# 开始安装 office2007winetricks office2007pro 在弹出的安装界面中可以像 windows 下一样一步一步正常安装，注意要点 许可协议中方块字体可以不用管，不影响后续使用。 安装过程中注意挑选自己安装的组建即可，一般只勾选三件套 word excel ppt 以及公共的共享功能和工具。 安装路径默认 C:\\Program Files\\Microsoft Office 即可，会自动映射到你前面所设置的 wine 容器目录中。 一般情况下装装完之后，应用菜单列表中即可启动正常使用office。 后续需要的设置 在 word 中输入法可能不能正常使用，如果遇到此情况，打开 word 选项–高级–输入法控制处于活动状态勾勾打上 关于字体 linux 里面是没有 windows 字体的，这会导致很多方块现象和想用的字体没有的情况。需要导入 windows 字体才可以正常使用 windows 字体。 如果你目前装有现成的 windows 系统，可以从 windows 字体目录中复制到 linux 直接使用。 注： windows 的字体在 windows 分区下 Windows/fonts 里面，linux 的字体在 /usr/share/fonts 里面，只需要复制所有的 ttf 格式字体即可 1234567891011# 任意在 /usr/share/fonts 下建立一个子目录sudo mkdir -p /usr/share/fonts/windows# 将 windows 字体复制过来sudo cp &lt;windows分区挂载点&gt;/Windows/fonts/*.ttf /usr/share/fonts/windows# 更新字体缓存cd /usr/share/fonts/windowssudo mkfontscalesudo mkfontdirsudo fc-cache 重启 office 生效","categories":[{"name":"教程","slug":"教程","permalink":"https://fkxxyz.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"https://fkxxyz.github.io/tags/archlinux/"},{"name":"linux","slug":"linux","permalink":"https://fkxxyz.github.io/tags/linux/"},{"name":"wine","slug":"wine","permalink":"https://fkxxyz.github.io/tags/wine/"}]},{"title":"archlinux 下 nvidia 双显卡配置--大黄蜂方案","slug":"c/nvidia","date":"2019-04-18T12:45:08.000Z","updated":"2019-04-18T12:45:08.000Z","comments":true,"path":"c/nvidia/","link":"","permalink":"https://fkxxyz.github.io/c/nvidia/","excerpt":"双显卡切换的问题是难倒很多新手的问题，我也是那么折腾过来的，大黄蜂的wiki 也有详细的介绍，本文做一个速记总结。","text":"双显卡切换的问题是难倒很多新手的问题，我也是那么折腾过来的，大黄蜂的wiki 也有详细的介绍，本文做一个速记总结。 安装 nvidia 内核模块 安装 用包管理器安装英伟达显卡驱动（如果显卡较老加载不成功则可尝试nvidia-390xx，更老则可搜索aur里的驱动安装 nvidia-340xx ，注意后面加了 -390xx 之后，后面所有带 nvidia 的包名都得加 -390xx，其它以此类推） 123pacman -S nvidia nvidia-utils# 若是 390xx 的，则包名为 nvidia-390xx nvidia-390xx-utils 32位程序程序使用英伟达显卡驱动支持（记得需要开启 multilib 仓库） 123pacman -S lib32-nvidia-utils# 若是 390xx 的，则包名为 lib32-nvidia-390xx-utils 尝试加载驱动 123modprobe nvidia nvidia_uvm nvidia_drm nvidia_modeset# 如果这一步报错，则卸载刚刚装的所有，回到第一步，尝试其它驱动。 测试 查看驱动是否在运行（有输出代表成功运行） 12lsmod | grep nvidianvidia-smi 查看显卡所有信息 1nvidia-smi -q 安装 bbswitch 安装 安装显卡驱动开关 1pacman -S bbswitch 启动 加载显卡驱动开关 1modprobe bbswitch 测试 把开关打开 1tee /proc/acpi/bbswitch &lt;&lt;&lt; ON 把开关关闭 1tee /proc/acpi/bbswitch &lt;&lt;&lt; OFF 查看开关状态 1cat /proc/acpi/bbswitch 安装大黄蜂 安装 安装配置双显卡切换器 1pacman -S bumblebee 配置 将自己用户加入到 bumblebee 组（注销重新登录后生效） 1sudo usermod -a -G bumblebee &lt;用户名&gt; 修改 /etc/bumblebee/bumblebee.conf : 123Driver=nvidia[driver-nvidia]PMMethod=bbswitch 启动 启动服务 1systemctl start bumblebeed 设置服务自动启动 1systemctl enable bumblebeed 测试 测试英伟达显卡驱动（不加optirun为测试集显，终端输出了显卡型号，以后用optirun运行程序则表示使用英伟达显卡） 12optirun glxspheres64optirun glxspheres32","categories":[{"name":"教程","slug":"教程","permalink":"https://fkxxyz.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"https://fkxxyz.github.io/tags/archlinux/"},{"name":"双显卡切换","slug":"双显卡切换","permalink":"https://fkxxyz.github.io/tags/%E5%8F%8C%E6%98%BE%E5%8D%A1%E5%88%87%E6%8D%A2/"}]},{"title":"在 Archlinux 下从 AUR 装的 xmind 启动报错的问题探究","slug":"learn/xmind-error","date":"2019-04-18T05:22:25.000Z","updated":"2019-04-18T05:22:25.000Z","comments":true,"path":"learn/xmind-error/","link":"","permalink":"https://fkxxyz.github.io/learn/xmind-error/","excerpt":"电脑版的思维导图软件，我还是最钟爱 xmind，然而在 archlinux 下从 AUR 构建 xmind 直接启动之后报错。","text":"电脑版的思维导图软件，我还是最钟爱 xmind，然而在 archlinux 下从 AUR 构建 xmind 直接启动之后报错。 问题描述 安装完之后，直接点击图标直接启动，弹出以下对话框。 在安装 XMind 时，输出的结果 123456789101112131415161718192021222324252627282930正在加载软件包...正在解析依赖关系...正在查找软件包冲突...软件包 (1) xmind-3.7.8+8update8-1全部安装大小： 125.02 MiB:: 进行安装吗？ [Y&#x2F;n] (1&#x2F;1) 正在检查密钥环里的密钥 [###########################] 100%(1&#x2F;1) 正在检查软件包完整性 [###########################] 100%(1&#x2F;1) 正在加载软件包文件 [###########################] 100%(1&#x2F;1) 正在检查文件冲突 [###########################] 100%(1&#x2F;1) 正在检查可用存储空间 [###########################] 100%:: 正在处理软件包的变化...(1&#x2F;1) 正在安装 xmind [###########################] 100%If XMind crashed on start, trying delete ~&#x2F;.xmindIf you want to change gtk version or java version, please edit PKGBUILD and rebuild the package. Or edit &#x2F;usr&#x2F;share&#x2F;xmind&#x2F;XMind&#x2F;XMind.ini, change number to your gtk version after &quot;--launcher.GTK_version&quot;, and add&#x2F;delete &quot;--add-modules&#x3D;java.se.ee&quot; at the end of file if you use java 10&#x2F;8.xmind 的可选依赖 gtk2: gtk2 or gtk3 must install one [已安装] gtk3: gtk2 or gtk3 must install one [已安装] lame: needed for the feature audio notes [已安装]:: 正在运行事务后钩子函数...(1&#x2F;6) Arming ConditionNeedsUpdate...(2&#x2F;6) Updating fontconfig cache...(3&#x2F;6) Updating 32-bit fontconfig cache...(4&#x2F;6) Updating the desktop file MIME type cache...(5&#x2F;6) Updating the MIME type database...(6&#x2F;6) Updating X fontdir indices... 问题探究 常规思考 由打包者提示的信息，基本可以猜测，是 java 运行环境的问题，以及启动参数 --add-modules=java.se.ee 的问题。 那么尝试从命令行启动，看看有没有报错信息吧，先找到对应的命令 12345pacman -Ql xmind | grep desktop# 输出 xmind /usr/share/applications/xmind.desktopcat /usr/share/applications/xmind.desktop | grep Exec# 输出 Exec=XMind %F 得知启动命令是 XMind，那么直接执行 XMind 试试之后，得到如下报错，同时弹出上面那错误对话框。 123Unrecognized option: --add-modules&#x3D;java.se.eeError: Could not create the Java Virtual Machine.Error: A fatal exception has occurred. Program will exit. 提示很明显，不识别的参数 --add-modules=java.se.ee，结合上面安装的时候给的信息，去编辑 /usr/share/xmind/XMind/XMind.ini，发现里面有 --add-modules=java.se.ee 这一行，把这一行删掉。 然后再输入 XMind ，发现启动成功！ 深入探究 抱着追根究低的态度继续思考，–add-modules=java.se.ee 有什么意义呢为什么会被加上？再细细读打包者给出的信息的最后一句话 1and add&#x2F;delete &quot;--add-modules&#x3D;java.se.ee&quot; at the end of file if you use java 10&#x2F;8. 很容易猜出，java 10 可能支持 --add-modules=java.se.ee，而 java 8 不支持。 看看当前的系统中的 java 版本吧 1java -version 果然是 1.8 版本。 那么我们装个 java 10 试试。 1sudo pacman -S java-runtime&#x3D;10 然后用 java 切换脚本（详见 java的archwiki），切换成 java 10 123456789# 列出系统中所有 java 环境archlinux-java status# 切换 java 10 为默认环境sudo archlinux-java set java-10-openjdk# 查看切换结果archlinux-java statusjava -version 然后再试试启动 XMind，发现启动不了了，如下弹窗报错 去看这个日志，发现一大堆，因为没学过太多 java，所以看不懂也并不想看。 直接把 --add-modules=java.se.ee 加回 /usr/share/xmind/XMind/XMind.ini 再试试启动，发现启动成功。 也就是验证了前面猜测是正确的： 在 java 8 的环境下，不能有 --add-modules=java.se.ee 在 java 10 的环境下，必须有 --add-modules=java.se.ee 修改 PKGBUILD 重新打包 我再打开这个包的 PKGBUILD 一看，发现有 JAVA_VERSION=10 语句，然后 package 函数里有 if [[ “$JAVA_VERSION” != “8” ]]; then 来决定是否往里写 --add-modules=java.se.ee 但是就算在这里改了 JAVA_VERSION 这个变量，那谁知道用户的机子里默认的是 java8 还是 java10 呢？这里 JAVA_VERSION 设置的是 10 ，而大多数用户默认肯定是 8，这么一来，岂不是对新手很不友好？ 有没有更好的打包方案呢，有，我觉得可以这样做： 将依赖行为 depends=(‘java-runtime&gt;=8’) 改成 depends=(“java-runtime=$JAVA_VERSION”) 将启动脚本里面加上一行对应的 PATH 变量来显式指定 java 环境。 即在最后一行 cp ${srcdir}/XMind ${pkgdir}/usr/bin/ 后面加 1sed -i &#39;&#x2F;exec&#x2F;iPATH&#x3D;&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-&#39;&quot;$JAVA_VERSION&quot;&#39;-openjdk&#x2F;bin:$PATH&#39; $&#123;pkgdir&#125;&#x2F;usr&#x2F;bin&#x2F;XMind 至此，观察到里面选择 gtk2 还是 gtk3 也是同样的道理。 最终给出我修改后完整的 PKGBUILD 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# $Id: PKGBUILD 184754 2016-08-01 15:30:30Z felixonmars $# Maintainer: RemiliaForever &lt;remilia AT koumakan DOT cc&gt;# Contributor: Felix Yan &lt;felixonmars@gmail.com&gt;# Contributor: Christoph Drexler &lt;chrdr at gmx dot at&gt;# Contributor: Jelle van der Waa &lt;jellevdwaa@gmail.com&gt;# GTK_VERSION 2/3GTK_VERSION=3# JAVA_VERSION 8/10JAVA_VERSION=10pkgname=xmindpkgver=3.7.8+8update8_filename=$pkgname-8-update8-linuxpkgrel=1pkgdesc=\"Brainstorming and Mind Mapping Software\"arch=('i686' 'x86_64')url=\"http://www.xmind.net\"license=('EPL' 'LGPL')depends=(\"java-runtime=$JAVA_VERSION\" \"gtk$GTK_VERSION\")optdepends=('lame: needed for the feature audio notes')install=xmind.installsource=(\"http://www.xmind.net/xmind/downloads/$&#123;_filename&#125;.zip\"'XMind''xmind.desktop''xmind.xml''xmind.png''xmind_file.png')sha512sums=('77c5c05801f3ad3c0bf5550fa20c406f64f3f5fa31321a53786ac1939053f5c4f0d0fb8ab1af0a9b574e3950342325b9c32cf2e9a11bf00a1d74d2be1df75768''SKIP''SKIP''SKIP''SKIP''SKIP')package() &#123; mkdir -p $&#123;pkgdir&#125;/usr/share/$&#123;pkgname&#125; cp -r $&#123;srcdir&#125;/configuration $&#123;pkgdir&#125;/usr/share/$&#123;pkgname&#125;/ cp -r $&#123;srcdir&#125;/features $&#123;pkgdir&#125;/usr/share/$&#123;pkgname&#125;/ cp -r $&#123;srcdir&#125;/plugins $&#123;pkgdir&#125;/usr/share/$&#123;pkgname&#125;/ cp $&#123;srcdir&#125;/*.xml $&#123;pkgdir&#125;/usr/share/$&#123;pkgname&#125;/ mkdir -p $&#123;pkgdir&#125;/usr/share/licenses/$&#123;pkgname&#125; cp $&#123;srcdir&#125;/&#123;epl-v10,lgpl-3.0&#125;.html $&#123;pkgdir&#125;/usr/share/licenses/$&#123;pkgname&#125;/ cp $&#123;srcdir&#125;/xpla.txt $&#123;pkgdir&#125;/usr/share/licenses/$&#123;pkgname&#125;/ if [[ \"$CARCH\" == \"i686\" ]]; then cp -r $&#123;srcdir&#125;/XMind_i386 $&#123;pkgdir&#125;/usr/share/$&#123;pkgname&#125;/XMind else cp -r $&#123;srcdir&#125;/XMind_amd64 $&#123;pkgdir&#125;/usr/share/$&#123;pkgname&#125;/XMind fi mkdir -p $&#123;pkgdir&#125;/usr/share/fonts/$&#123;pkgname&#125; cp -r $&#123;srcdir&#125;/fonts $&#123;pkgdir&#125;/usr/share/fonts/$&#123;pkgname&#125;/ mkdir -p $&#123;pkgdir&#125;/usr/share/applications cp $&#123;srcdir&#125;/xmind.desktop $&#123;pkgdir&#125;/usr/share/applications/ mkdir -p $&#123;pkgdir&#125;/usr/share/mime/packages cp $&#123;srcdir&#125;/xmind.xml $&#123;pkgdir&#125;/usr/share/mime/packages/ mkdir -p $&#123;pkgdir&#125;/usr/share/pixmaps cp $&#123;srcdir&#125;/*.png $&#123;pkgdir&#125;/usr/share/pixmaps/ # fix configuration sed -i \"s|^./configuration$|@user.home/.xmind/configuration|\" $&#123;pkgdir&#125;/usr/share/$&#123;pkgname&#125;/XMind/XMind.ini sed -i \"s|^../workspace$|@user.home/.xmind/workspace|\" $&#123;pkgdir&#125;/usr/share/$&#123;pkgname&#125;/XMind/XMind.ini if [[ \"$GTK_VERSION\" != \"2\" ]]; then sed -i \"s|^2$|3|\" $&#123;pkgdir&#125;/usr/share/$&#123;pkgname&#125;/XMind/XMind.ini fi if [[ \"$JAVA_VERSION\" != \"8\" ]]; then echo \"--add-modules=java.se.ee\" &gt;&gt; $&#123;pkgdir&#125;/usr/share/$&#123;pkgname&#125;/XMind/XMind.ini fi mkdir -p $&#123;pkgdir&#125;/usr/bin cp $&#123;srcdir&#125;/XMind $&#123;pkgdir&#125;/usr/bin/ sed -i '/exec/iPATH=/usr/lib/jvm/java-'\"$JAVA_VERSION\"'-openjdk/bin:$PATH' $&#123;pkgdir&#125;/usr/bin/XMind&#125; 然后可以随意修改 GTK_VERSION 和 JAVA_VERSION 来达到目的，并且还不用额外修改任何东西，无论如何切换默认 java 版本，都不会再影响启动了。 重新打包测试，成功。","categories":[{"name":"探究学习","slug":"探究学习","permalink":"https://fkxxyz.github.io/categories/%E6%8E%A2%E7%A9%B6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"https://fkxxyz.github.io/tags/archlinux/"},{"name":"思维导图","slug":"思维导图","permalink":"https://fkxxyz.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"}]},{"title":"NetworkManager 网络配置速查","slug":"c/nm","date":"2019-04-14T19:06:10.000Z","updated":"2019-04-14T19:06:10.000Z","comments":true,"path":"c/nm/","link":"","permalink":"https://fkxxyz.github.io/c/nm/","excerpt":"一般普通用户上网的方式无非就三种：有线以太网、无线网络、宽带PPPOE拨号。而 NetworkManager 这个软件将以上三种方式集成一体，而且配置方便。","text":"一般普通用户上网的方式无非就三种：有线以太网、无线网络、宽带PPPOE拨号。而 NetworkManager 这个软件将以上三种方式集成一体，而且配置方便。 NetworkManager 是 gnome 桌面环境自带的网络管理服务，在 tty 的命令行中也可以运行，刚装完的系统，想要网络，只需要装这一个包就够！ 因此写这篇文章作为一个速查备忘和新手入门，更高级的用法可以自己查看 nmcli 自带的 --help 。 服务管理 启动网络管理器服务 1systemctl start NetworkManager 将此服务设为自动启动 1systemctl enable NetworkManager 全局管理 查看网络概况 12nmclinmcli -overview 打开关闭总网络开关 12nmcli n on/offnmcli network on/off 设备管理 查看网络设备状态 123nmcli dnmcli devicenmcli device status 查看网络设备详细信息 123nmcli d shnmcli device shownmcli device show eth0 连接/断开设备 12mncli d conn/dis eth0mncli device connect/disconnect eth0 删除软件设备 1nmcli d del 监控某个设备的连接过程 12nmcli d mon eth0nmcli d monitor eth0 设置某个设备自动连接 1nmcli d set eth0 auto yes/no 设置某个设备是否本程序管理 1nmcli d set eth0 man yes/no 配置某个设备（暂时的，重启失效） 1nmcli d mod eth0 ?? 让某个设备重新应用 1mncli d re eth0 查询wifi 123nmcli d wifinmcli d wifi listnmcli d wifi list ifname wlp3s0 刷新wifi 12nmcli d wifi rescannmcli d wifi rescan ifname wlp3s0 连接wifi 12nmcli d wifi connect &lt;SSID&gt; password &lt;password&gt;nmcli d wifi connect &lt;SSID&gt; password &lt;password&gt; ifname wlp3s0 配置管理 查看所有配置 所有配置文件保存在 /etc/NetworkManager/system-connections 12nmcli cnmcli c show 删除某个配置 1nmcli c del &lt;name&gt; 复制某个配置 1nmcli c clone &lt;name&gt; &lt;new_name&gt; 连接/断开某个配置 1nmcli c up/down &lt;name&gt; 重新载入配置文件 1nmcli c reload 导入/导出配置文件 1nmcli ?? 监视某个配置 1nmcli c mon &lt;name&gt; 修改某个配置的某一行 1nmcli c mod &lt;name&gt; &lt;配置&gt;.&lt;属性&gt; &lt;值&gt; 启动编辑某个配置 1nmcli c edit &lt;name&gt; 创建配置 1nmcli c add con-name &lt;name&gt; type ??? ... 创建pppoe拨号配置 1nmcli c add con-name &lt;name&gt; type pppoe ifname &lt;设备&gt; username &lt;username&gt; password &lt;password&gt;","categories":[{"name":"教程","slug":"教程","permalink":"https://fkxxyz.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"https://fkxxyz.github.io/tags/archlinux/"},{"name":"linux","slug":"linux","permalink":"https://fkxxyz.github.io/tags/linux/"}]},{"title":"archlinux 的基本配置","slug":"c/base","date":"2019-04-14T16:04:54.000Z","updated":"2019-04-14T16:04:54.000Z","comments":true,"path":"c/base/","link":"","permalink":"https://fkxxyz.github.io/c/base/","excerpt":"本文速记一些刚装完 archlinux 之后所需的必要配置，以便以后速查。","text":"本文速记一些刚装完 archlinux 之后所需的必要配置，以便以后速查。 基本配置 设置键盘布局 列出所有可用的键盘布局 1ls /usr/share/kbd/keymaps/**/*.map.gz 设置想要的键盘布局（默认 us，只需指定文件名即可，无需拓展名） loadkeys us 设置键盘布局 写入文件 /etc/vconsole.conf 1KEYMAP&#x3D;us 设置时区 设置为上海时区 1ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 设置系统时间 （以下两个二选一） 将硬件时间设置为系统的本地时间（与windows默认相同） 1hwclock -s -l 将硬件时间设置为系统的UTC时间（与mac系统默认相同） 1hwclock -s -u 启用 ntp 服务，获取网络时间并设置为当前系统时间 1timedatectl set-ntp true 生成时间偏差（/etc/adjtime） 1hwclock -w 设置本地语言 修改 /etc/locale.gen，去除en_US.UTF-8和zh_CN.UTF-8前面的井号 12locale-genecho LANG&#x3D;en_US.UTF-8 &gt;&#x2F;etc&#x2F;locale.conf 修改主机名 1hostnamectl set-hostname ??? 在 /etc/hosts 里添加（设置网络主机名） 123127.0.0.1 localhost::1 localhost127.0.1.1 ???.localdomain ??? 用户管理 设置 root 用户的密码 1passwd root 创建新用户 1useradd -m ??? sudo 将 /etc/sudoers 中 %wheel 前面的 去掉 将某用户设成管理员（能够用sudo） 1usermod -a -G wheel ??? 配置软件源 参见： Arch Linux 软件仓库镜像使用帮助 ArchlinuxCN 镜像使用帮助 更新软件数据库 1pacman -Syy 更新系统 1pacman -Syu 开启别的仓库只需要取消注释 /etc/pacman.conf 相应的项，参见 archwiki-官方仓库 高级配置 禁用 beep 响铃 在 tty 下敲命令会时不时的发出 beep 声音，超级大声很烦，必须禁掉。 暂时生效 1rmmod pcspkr 永久生效 1echo blacklist pcspkr&gt;&gt;&#x2F;etc&#x2F;modprobe.d&#x2F;nobeep.conf 禁用 nouveau 驱动 此驱动bug过多，可能导致死机，花屏，卡顿等未知故障。 在 /etc/modprobe.d/no-nouveau.conf 中写入： 12blacklist nouveauoptions nouveau modeset&#x3D;0 禁用蓝牙 如果蓝牙没怎么用过，禁了会省电些 1find &#x2F;lib&#x2F;modules&#x2F;&#96;uname -r&#96;&#x2F;kernel -name bluetooth|xargs find|grep \\.xz$|awk -F&#39;&#x2F;&#39; &#39;&#123;print $NF&#125;&#39;|awk -F&#39;.&#39; &#39;&#123;print &quot;blacklist &quot; $1&#125;&#39; &gt;&gt;&#x2F;etc&#x2F;modprobe.d&#x2F;no-bluetooth.conf 解开 rf 锁 用查看 wifi 的 rf锁 1rfkill list 解除 rf 锁 1rfkill unblock all 开启 sysrq 1echo kernel.sysrq = 1 &gt; /etc/sysctl.d/sysrq.conf 该功能默认关闭，开启后对于死机时候防止硬盘损坏尤其管用。参见 官方文档sysrq","categories":[{"name":"教程","slug":"教程","permalink":"https://fkxxyz.github.io/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"https://fkxxyz.github.io/tags/archlinux/"}]},{"title":"用 python 自制需求列表来进行包管理，从此再也不用重装系统","slug":"d/spacman","date":"2019-04-12T19:25:44.000Z","updated":"2019-04-12T19:25:44.000Z","comments":true,"path":"d/spacman/","link":"","permalink":"https://fkxxyz.github.io/d/spacman/","excerpt":"问题背景 archlinux 是个可高度定制的 linux 发行版，在使用的过程中，需要反复测试很多软件包的功能，以达到自己想要的效果，效果不好的卸载，用得好的留下，但由于依赖是复杂的树状结构，时间长了，容易忘记自己测试过哪些包，以至于有些包只是临时安装的后来忘了卸载，随着积累容易导致在系统里留下大量不必要的包。 pacman 的功能之一是可以查询安装原因，安装原因有两种“单独指定安装”和“作为其他软件包的依赖关系安装”，也可以通过 pacman -Qdt 找出所有没必要的依赖包，pacman -Qe 可以列出所有自己显式指定安装过的包，还可以通过 pacman -Rscn 卸载某个软件来将其不必要的依赖也同时卸载。 虽然 pacman 功能强大，但依然没法满足以上需求，因为很多包都是自己指定安装，但是后来忘了自己只是临时测试这个包，测试过应当卸载，然而这类包显然留在系统中，这些包还不容易被找到，要是数量庞大，基本只能重装系统才能完全干净。 强迫症患者们当然希望自己的系统是干干净净，只有自己需要的包，没有其它任何垃圾包。 于是有了新的脚本需求…","text":"问题背景 archlinux 是个可高度定制的 linux 发行版，在使用的过程中，需要反复测试很多软件包的功能，以达到自己想要的效果，效果不好的卸载，用得好的留下，但由于依赖是复杂的树状结构，时间长了，容易忘记自己测试过哪些包，以至于有些包只是临时安装的后来忘了卸载，随着积累容易导致在系统里留下大量不必要的包。 pacman 的功能之一是可以查询安装原因，安装原因有两种“单独指定安装”和“作为其他软件包的依赖关系安装”，也可以通过 pacman -Qdt 找出所有没必要的依赖包，pacman -Qe 可以列出所有自己显式指定安装过的包，还可以通过 pacman -Rscn 卸载某个软件来将其不必要的依赖也同时卸载。 虽然 pacman 功能强大，但依然没法满足以上需求，因为很多包都是自己指定安装，但是后来忘了自己只是临时测试这个包，测试过应当卸载，然而这类包显然留在系统中，这些包还不容易被找到，要是数量庞大，基本只能重装系统才能完全干净。 强迫症患者们当然希望自己的系统是干干净净，只有自己需要的包，没有其它任何垃圾包。 于是有了新的脚本需求… 需求设计 需要这样一个脚本，这个脚本能实现： 能够从一个文本文档里面读取软件列表（不包含“作为其他软件包的依赖关系安装”的包，只需要指定顶层包），根据此列表与系统已安装的包进行对比，进行依赖计算，列出所有多余的包，列出所有指定了却未安装的包。 软件列表可以有以井号开头的注释，可以忽略空行，每行包含一个软件包。这样可以方便测试注释。 设计命令行参数，在必要时可以指定不同的配置文件，也可以指定自己喜欢的包管理器命令如 yay ，让脚本自动调用包管理器来同步软件列表和系统。 能满足的需求 要是真的实现了这样一个脚本，用处非常大，我在此罗列几点，充分发挥想象力的话，能带来无尽的乐趣。 **能根据自己的需要完全掌控系统的包：**把自己所有需要的软件做成列表（不需要考虑底层依赖），而且能对每一行的包名后面用井号注释一些自己想写的，让自己一目了然，也让系统里面出了这些包及其依赖的包之外不存在其它任何包，轻而易举地掌控系统的所有包，实现随心所欲高度定制。 **大幅度方便增删测试：**想测试一批软件时，只需要编辑这个软件列表，在里面添加若干行想要测试的软件，然后应用到系统，然后开始随便玩，等当不想用这些软件了，就注释或删掉那些行，再应用到系统，这些软件无影无踪，依赖也一个不留。 比如我想测试 deepin 的桌面环境，先执行 pacman -Sqg deepin 看看有哪些包，直接把这些包名复制到列表里，然后应用到系统…测完了从列表里删去，再应用到系统，完美回到没测试之前的样子。 **当成系统还原点：**只要我改变列表不变，那么我可以随意安装测试任何软件包，比如装 deepin 组，装任意多的包哪怕装了几十G碎碎的包，玩够了之后，直接应用列表，刚刚装的几十G直接在一分钟之内无影无踪一个不漏，完全回到测试以前的样子，此方法就是将一个列表看作是一个还原点，甚至可以设置多个还原点（多个列表）进行任意测试，配合 pacman 的装卸极速特性，基本可以随便玩了。 项目实现 实现思路 选择用 python来实现，因为 python的列表和字典非常好用，先从系统中读取所有软件包的信息，放到一个巨大的列表里，然后将每个软件包名作为字典的键，构建出一个大字典，然后对依赖进行整合，然后同样对列表里所有包进行这样处理，算出一个所需的包的集合，将系统里所有包也弄成一个集合，将两个集合直接相减，也就算出了所有多余的包了。 以下难点一个一个被攻破： 难点： 读取所有软件包信息，转换成 python 列表。 解决： 模拟执行 LANG=C pacman -Qi ，然后字符串处理。 难点： 某些包的依赖（Depends On）是一些包的提供字段（Provides）。 **解决：**利用字典的索引特性，把每个 Depends On 的内容转换成具体包名。 难点： 某些包的依赖（Depends On）是版本号的对比，比如 java-runtime&gt;=8，而版本由好几个段组成，比较算法可能过于复杂。 **解决：**查询 libalpm 的开发文档得知，里面有个 C 库函数 alpm_pkg_vercmp 被封装在 libalpm.so 中，直接模拟调用，版本比较问题解决。 本项目已经用 python3 实现，我将它取名为超级包管理器，脚本名称为 spacman ，放在 github 上开源托管。方便以后直接调用，已经自己打包上传到了 aur，可以用 yay 直接安装。 1yay -S spacman 所有强迫症患者的福音！ 用法 命令语法 12345678910用法: spacman [-h] [--config 列表文件] [--pacman 包管理器] [--apply] [--query]可选参数: -h, --help 显示帮助信息 --config 列表文件, -c 列表文件 指定列表文件（默认为 ~&#x2F;.config&#x2F;spacman&#x2F;default.conf） --pacman 包管理器, -p 包管理器 指定包管理器（例如 yay，默认为 pacman） --apply, -a 自动调用包管理器，将列表应用到系统 --query, -q 查询一个列表中所有的包 以上用法可能已经过时没有更新，详见 spacman --help 用法举例 123456789101112131415# 将 ~/.config/spacman/default.conf 列表与系统已安装的包进行对比，输出结果spacman# 将 ~/spacman1.conf 作为列表进行对比，输出结果spacman -c ~/spacman1.conf# 将 ~/.config/spacman/default.conf 列表应用到系统spacman -a# 警告，万万不可将空列表应用到系统，否则会卸载所有软件包# 将 ~/.config/spacman/default.conf 列表应用到系统，并用 yay 作为包管理器spacman -a -p yay# 列出 ~/.config/spacman/default.conf 列表中所有软件包并排序spacman -q | sort 如何写配置 到底该如何写配置文件呢，首先要自己总结出自己所有需要的包列表，写到一个文本文档里，只需要写你需要的包，不需要操心任何依赖，一行一个，格式如下： 123456789linuxlinux-firmwarebasegrubdhcpcdiwwpa_supplicantarchlinuxcn-keyringyay 当然为了你的方便，你可以把配置文件当成笔记，顺便记录linux软件包名和功能，井号开头注释即可，也可以在包名后面跟井号注释，空行随意 1234567891011121314151617181920# 内核linuxlinux-firmware # 固件# 基本base# 引导器grub# 网络dhcpcd # dhcp客户端iw # 无线管理wpa_supplicant # 无线加密# 源archlinuxcn-keyring# aur helperyay 如果嫌麻烦，可以用 pacman -Qe 快速生成一个列表，这命令表示列出所有自己用pacman主动安装的包名。 1pacman -Qe &gt; a.conf 但是不建议这样做，因为生成的列表是按字母排序，而且自己整理注释起来麻烦，还不如自己从头写个。 我的日常列表也托管到 github 了，可以随时参考 spacman.conf 使用逻辑 我暂时想出以下使用方法，大家可以尽情的发挥想象发挥更多的潜力。 当成个人做的笔记记录，用linux用久了自己也记不清自己需要哪些包，配置文件可以刚好帮你记录。 配置列表中，自己想删去哪个包了，可以井号注释掉，而不必删掉一行，然后 spacman -a 即可，以后想反悔直接去掉井号注释，再次 spacman -a 可以把所有自己可能需要的同类软件包都记录下来，然后都用井号注释掉，然后想用哪个直接去掉哪个的井号。 实验各个软件，而不加进列表，只把满意的软件加进列表，不满意的由于没加进列表，直接 spacman -a 会删掉所有没进列表的软件包括其依赖，而不必一个一个 pacman -Rsc 卸载，省心又高效。例如实验各个桌面环境，一个gnome桌面环境有多少个顶层包咱们也知道。","categories":[{"name":"原创开发","slug":"原创开发","permalink":"https://fkxxyz.github.io/categories/%E5%8E%9F%E5%88%9B%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"archlinux","slug":"archlinux","permalink":"https://fkxxyz.github.io/tags/archlinux/"},{"name":"python","slug":"python","permalink":"https://fkxxyz.github.io/tags/python/"}]}],"categories":[{"name":"原创开发","slug":"原创开发","permalink":"https://fkxxyz.github.io/categories/%E5%8E%9F%E5%88%9B%E5%BC%80%E5%8F%91/"},{"name":"探究学习","slug":"探究学习","permalink":"https://fkxxyz.github.io/categories/%E6%8E%A2%E7%A9%B6%E5%AD%A6%E4%B9%A0/"},{"name":"教程","slug":"教程","permalink":"https://fkxxyz.github.io/categories/%E6%95%99%E7%A8%8B/"},{"name":"记录","slug":"记录","permalink":"https://fkxxyz.github.io/categories/%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"rime","slug":"rime","permalink":"https://fkxxyz.github.io/tags/rime/"},{"name":"fcitx","slug":"fcitx","permalink":"https://fkxxyz.github.io/tags/fcitx/"},{"name":"输入法","slug":"输入法","permalink":"https://fkxxyz.github.io/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"},{"name":"python","slug":"python","permalink":"https://fkxxyz.github.io/tags/python/"},{"name":"音乐","slug":"音乐","permalink":"https://fkxxyz.github.io/tags/%E9%9F%B3%E4%B9%90/"},{"name":"和弦","slug":"和弦","permalink":"https://fkxxyz.github.io/tags/%E5%92%8C%E5%BC%A6/"},{"name":"即兴伴奏","slug":"即兴伴奏","permalink":"https://fkxxyz.github.io/tags/%E5%8D%B3%E5%85%B4%E4%BC%B4%E5%A5%8F/"},{"name":"皮肤","slug":"皮肤","permalink":"https://fkxxyz.github.io/tags/%E7%9A%AE%E8%82%A4/"},{"name":"archlinux","slug":"archlinux","permalink":"https://fkxxyz.github.io/tags/archlinux/"},{"name":"wine","slug":"wine","permalink":"https://fkxxyz.github.io/tags/wine/"},{"name":"桌面环境","slug":"桌面环境","permalink":"https://fkxxyz.github.io/tags/%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83/"},{"name":"linux","slug":"linux","permalink":"https://fkxxyz.github.io/tags/linux/"},{"name":"信息安全","slug":"信息安全","permalink":"https://fkxxyz.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"},{"name":"前端","slug":"前端","permalink":"https://fkxxyz.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"php","slug":"php","permalink":"https://fkxxyz.github.io/tags/php/"},{"name":"shell","slug":"shell","permalink":"https://fkxxyz.github.io/tags/shell/"},{"name":"sed","slug":"sed","permalink":"https://fkxxyz.github.io/tags/sed/"},{"name":"hexo","slug":"hexo","permalink":"https://fkxxyz.github.io/tags/hexo/"},{"name":"思维导图","slug":"思维导图","permalink":"https://fkxxyz.github.io/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"},{"name":"双显卡切换","slug":"双显卡切换","permalink":"https://fkxxyz.github.io/tags/%E5%8F%8C%E6%98%BE%E5%8D%A1%E5%88%87%E6%8D%A2/"}]}